#!/usr/bin/env python3
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib.request
import re
import ssl
from pathlib import Path
import asyncio
import threading
import json
import sys


def MakeHandlerClassWithConfig(get_paths, post_paths):
    class CustomHandler(BaseHTTPRequestHandler):
        get_paths = {}
        post_paths = {}

        def __init__(self, *args, **kwargs):
            self.get_paths = get_paths
            self.post_paths = post_paths
            super(CustomHandler, self).__init__(*args, **kwargs)
            # this is where I can customize things for my own customized version of a BaseHTTPRequestHandler

        def do_HEAD(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()

        def do_GET(self):
            found_path = False
            #print(self.path)
            for path in self.get_paths:
                regex = re.compile(path)
                route = regex.match(self.path)
                if route is not None:
                    #print(path)
                    #print(str(len(route.groups())))
                    if len(route.groups()) >= 2:
                        self.respond(self.get_paths[path], route.group(1), route.group(2))
                    else:
                        self.respond(self.get_paths[path], route.group(1), None)
                    found_path = True
            if not found_path:
                self.send_response(404)
                self.end_headers()

        def respond(self, data, tid, cid):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            # pass through here
            if cid is not None:
                url = data['url'].format(str(tid), str(cid))
            else:
                url = data['url'].format(str(tid))
            with urllib.request.urlopen(url, context=ssl._create_unverified_context()) as response:
                content = response.read()
            self.wfile.write(content)

        def do_POST(self):
            found_path = False
            #print(self.path)
            for path in self.post_paths:
                route = re.match(path, self.path)
                if route is not None:
                    found_path = True
                    #print(path)
                    if len(route.groups()) >= 1:
                        self.respond_post(self.post_paths[path], route.group(1))
                    else:
                        self.respond_post(self.post_paths[path], None)
            if not found_path:
                self.send_response(404)
                self.end_headers()

        def respond_post(self, data, tid):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            content_length = int(self.headers.get('Content-Length'), 0)
            post_body = self.rfile.read(content_length)
            url = data['url'].format(str(tid)) if tid else data['url']
            with urllib.request.urlopen(url, data=post_body, context=ssl._create_unverified_context()) as response:
                content = response.read()
            self.wfile.write(content)

        def log_message(self, format, *args):
            return  # I don't want to fill up memory with these messages
    return CustomHandler


class MyServer:
    config = {}

    def __init__(self, *args, **kwargs):
        for key, value in kwargs.items():
            if key == "config":
                self.config = value
        #return None

    async def start(self):
        handler = MakeHandlerClassWithConfig(get_paths=self.config['get_paths'], post_paths=self.config['post_paths'])
        httpd = HTTPServer((self.config['host'], self.config['port']), handler)
        keyfile = Path(self.config['key_path'])
        certfile = Path(self.config['cert_path'])
        # optionally server this up via SSL if the key.pem and cert.pem files exist in the same folder
        if keyfile.is_file() and certfile.is_file():
            httpd.socket = ssl.wrap_socket(httpd.socket, keyfile=keyfile, certfile=certfile, server_side=True)
        try:
            t = threading.Thread(target=httpd.serve_forever)
            t.setDaemon(True) # don't hang on exit
            t.start()
            print('Server loop running in thread:', t.getName())
            sys.stdout.flush()
            #httpd.serve_forever()
        except KeyboardInterrupt:
            pass
            httpd.server_close()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        config_file = open("config.json", 'r')
        main_config = json.loads(config_file.read())
        print("Opening config and starting instances...")
        sys.stdout.flush()
        for inst in main_config['instances']:
            # clean this up a little and then pass it through to the MyServer() creation
            specific_config = {}
            specific_config['get_paths'] = {
                inst['GET']['getNextTask']: {'url': main_config['apfellBase'] + main_config['apfellNextTask']},
                inst['GET']['getFile']: {'url': main_config['apfellBase'] + main_config['apfellGetFile']}
                }
            specific_config['post_paths'] = {
                inst['POST']['postResponse']: {'url': main_config['apfellBase'] + main_config['apfellPostResponse']},
                inst['POST']['postNewCallback']: {'url': main_config['apfellBase'] + main_config['apfellNewCallback']},
                inst['POST']['postNewCallbackAESPSK']: {'url': main_config['apfellBase'] + main_config['apfellNewCallbackAESPSK']},
                inst['POST']['postNewCallbackEKE']: {'url': main_config['apfellBase'] + main_config['apfellNewCallbackEKE']},
                inst['POST']['postNewCallbackDHEKE']: {'url': main_config['apfellBase'] + main_config['apfellNewCallbackDHEKE']}
                }
            specific_config['port'] = inst['port']
            specific_config['host'] = inst['host']
            specific_config['key_path'] = inst['key_path']
            specific_config['cert_path'] = inst['cert_path']
            specific_server = MyServer(config=specific_config)
            asyncio.ensure_future(specific_server.start())

    except Exception as e:
        print("Failed to open config")
        print(str(e))
        exit(1)
    loop.run_forever()
