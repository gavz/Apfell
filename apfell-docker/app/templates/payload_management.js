// ############# PAYLOADS SECTION ###############################
var payloads = []; //all services data
var show_autogenerated = false;
var payloads_table = new Vue({
    el: '#payloads_table',
    data: {
        payloads
    },
    methods: {
        delete_button: function(p){
            $( '#payloadDeleteModal' ).modal('show');
            $( '#payloadDeleteSubmit' ).unbind('click').click(function(){
                if ($( '#payloadDeleteFile' ).is(":checked")){
                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloads/" + p.uuid + "/1", delete_callback, "DELETE", null);
                }
                else{
                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloads/" + p.uuid + "/0", delete_callback, "DELETE", null);
                }
            });
        },
        show_uuid_button: function(p){
            alertTop("info", p.uuid);
        },
        show_parameters_button: function(p){
            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloads/" + p.uuid, get_config_callback, "GET", null);
            $( '#payloadConfigModal' ).modal('show');
        },
        download_payload_button: function(p){
            payload = httpGetSync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloads/download/" + p.uuid);
            download_from_memory(p.location.split("/").slice(-1)[0], btoa(payload));
        }
    },
    delimiters: ['[[',']]']
});
// register the select all for deleting
$( '#selectAllForDelete').unbind('click').click(function(){
    for(var i = 0; i < payloads_table.payloads.length; i++){
        if( $('#selectAllForDelete').is(":checked")){
            payloads_table.payloads[i]['checked'] = true;
        }
        else{
            payloads_table.payloads[i]['checked'] = false;
        }
    }

});
function delete_selected_function(){
    $( '#payloadDeleteModal' ).modal('show');
    $( '#payloadDeleteSubmit' ).unbind('click').click(function(){
        data = {'payloads': []};
        for(var i = 0; i < payloads_table.payloads.length; i++){
            if(payloads_table.payloads[i]['checked']){
                data['payloads'].push({'uuid': payloads_table.payloads[i]['uuid'], 'from_disk':$('#payloadDeleteFile').is(":checked")})
            }
        }
        httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloads/delete_bulk", delete_selected_callback, "POST", data);
    });
}
function delete_selected_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
    }
    if(data['status'] == 'error'){
        alertTop("danger", "<b>Error</b>: " + JSON.stringify(data['error'], null, 2));
    }
    payloads_to_delete = Object.keys(data['successes']);
    for(var i = 0; i < payloads_to_delete.length; i++){
        for(var j = 0; j < payloads_table.payloads.length; j++){
            if(payloads_table.payloads[j]['uuid'] == payloads_to_delete[i]){
                payloads_table.payloads.splice(j, 1);
            }
        }
    }
    $('#selectAllForDelete').prop("checked", false);

}
function delete_callback(response){
	try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
	if(data['status'] == 'success'){
		var i = 0;
		for( i = 0; i < payloads_table.payloads.length; i++){
		    if(payloads_table.payloads[i].uuid == data['uuid']){
		        break;
		    }
		}
		payloads_table.payloads.splice(i, 1);
	}
	else{
		//there was an error, so we should tell the user
		alertTop("danger", "Error: " + data['error']);
	}
};
var payload_config_vue = new Vue({
    el: '#payloadConfigModal',
    data: {
        config: {}
    },
    delimiters: ['[[',']]']
});
function get_config_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        Vue.set(payload_config_vue.config, "commands", data['commands']);
        Vue.set(payload_config_vue.config, "c2_profile_parameters_instance", data['c2_profile_parameters_instance']);
        Vue.set(payload_config_vue.config, "build_message", data['build_message']);
    }
    else{
        alertTop("danger", data['error']);
    }
};
function startwebsocket_payloads(){
	var ws = new WebSocket('{{ws}}://{{links.server_ip}}:{{links.server_port}}/ws/payloads/current_operation');
	ws.onmessage = function(event){
		if(event.data != ""){
			pdata = JSON.parse(event.data);
			if(pdata['deleted'] == false){
			    for(var i = 0; i < payloads_table.payloads.length; i++){
                    if(pdata['id'] == payloads_table.payloads[i]['id']){
                        //just update the data
                        Vue.set(payloads_table.payloads, i, Object.assign({}, payloads_table.payloads[i], pdata));
                        return;
                    }
			    }
                pdata['checked'] = false; //add in this data to track if an agent is checked for deletion
                payloads_table.payloads.push(pdata);
            }
			
		}
	}
	ws.onclose = function(){
		//console.log("payloads socket closed");
		alertTop("danger", "Socket closed, please refresh");
	}
	ws.onerror = function(){
		//console.log("payloads socket errored");
		alertTop("danger", "Socket errored, please refresh");
	}
	ws.onopen = function(){
		//console.log("payloads socket opened");
	}
}
startwebsocket_payloads();


// #################### PAYLOADTYPE AND COMMAND SECTION ###############################
var payloadtypes = [];
var payloadtypeCreateWrapperSelected = false;
var payloadtypes_table = new Vue({
    el: '#payloadtypes_table',
    data:{
        payloadtypes,
    },
    methods: {
        delete_payloadtype_button: function(p){
            $( '#payloadtypeDeleteModal' ).modal('show');
            $( '#payloadtypeDeleteSubmit' ).unbind('click').click(function(){
            var fromDisk = 0;
                if( $('#payloadtypeDeleteFromDisk').is(":checked")){
                    fromDisk = 1;
                }
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + p.ptype + "/" + fromDisk, delete_payloadtype_callback, "DELETE", null);
            });
        },
        edit_payloadtype_button: function(p){
            $('#payloadtypeEditPtype').val(p['ptype']);
            $('#payloadtypeEditPtype').prop("disabled", true); //don't want this to be edited
            $('#payloadtypeEditFileExtension').val(p['file_extension']);
            if(p['external']){
                $('#payloadtypeEditExternal').prop('checked', true);
            }else{
                $('#payloadtypeEditExternal').prop('checked', false);
            }
            if(p['wrapper']){
                $('#payloadtypeEditWrapper').prop('checked', true);
                $('#payloadtypeEditWrappedPayloadType').val(p['wrapped_payload_type']);
                $('#payloadtypeEditWrappedPayloadTypeRow').attr("hidden", false);
            }
            else{
                $('#payloadtypeEditWrapper').prop('checked', false);
                $('#payloadtypeEditWrappedPayloadTypeRow').attr("hidden", true);
            }
            $( '#payloadtypeEditWrapper').unbind('click').click(function(){
                if( $('#payloadtypeEditWrapper').is(":checked")){
                    $('#payloadtypeEditWrappedPayloadTypeRow').attr("hidden", false);
                }
                else{
                    $('#payloadtypeEditWrappedPayloadTypeRow').attr("hidden", true);
                }
            });
            $('#payloadtypeEditCommandTemplate').val(p.command_template);
            $('#payloadtypeEditSupportedOS').val(p.supported_os.split(","));
            $('#payloadtypeEditExecuteHelp').val(p.execute_help);
            // send a request to get the uploaded files
            payloadtypeFiles.payloadtype_name = p['ptype'];
            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + p['ptype'] + "/files", set_files_edit_payloadtype_callback, "GET", null);

            $('#payloadtypeEditModal').modal('show');
            $( '#payloadtypeEditSubmit' ).unbind('click').click(function(){
                var data = {"file_extension": $( '#payloadtypeEditFileExtension').val()};
                data["wrapper"]= $('#payloadtypeEditWrapper').is(":checked");
                data['command_template'] = $('#payloadtypeEditCommandTemplate').val();
                data['supported_os'] = $('#payloadtypeEditSupportedOS').val();
                data['execute_help'] = $('#payloadtypeEditExecuteHelp').val();
                data['external'] = $('#payloadtypeEditExternal').is(":checked");
                if($('#payloadtypeEditWrapper').is(":checked")){
                    data["wrapped_payload_type"]= $('#payloadtypeEditWrappedPayloadType').val();
                }
                var file = document.getElementById('payloadtypeEditUploadFiles');
                if(file.files.length > 0){
                    var filedata = file.files;
                    uploadFileAndJSON("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + p['ptype'], edit_payloadtype_callback, filedata, data, "PUT");
                    file.value = file.defaultValue;
                }
                else{
                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + p['ptype'], edit_payloadtype_callback, "PUT", data);
                }
                var file = document.getElementById('payloadtypeEditUploadContainerFiles');
                if(file.files.length > 0){
                    var filedata = file.files;
                    uploadFiles("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + p['ptype'] + "/container_upload", null, filedata);
                    file.value = file.defaultValue;
                }
            });
        },
        add_commands_button: function(p){
            $( '#commandAddCode').val(p.command_template);
            $( '#commandAddVersion').val(1);
            $( '#commandAddVersion').prop('disabled', true);
            $( '#commandAddModal' ).modal('show');
            $( '#commandAddSubmit' ).unbind('click').click(function(){
                //base64 encode the code before submitting it or base64 encode the file
                var file = document.getElementById('commandAddFile');
                var code = "";
                var data = {'cmd': $('#commandAddCmd').val(), 'help_cmd': $('#commandAddHelpCmd').val(),
                'description': $('#commandAddDescription').val(), 'payload_type': p.ptype, 'code': "",
                "is_exit": $('#commandAddIsExit').is(":checked")};

                data['needs_admin'] = $('#commandAddNeedsAdmin').is(":checked");
                if(file.files.length > 0){
                    var filedata = file.files;
                    uploadFileAndJSON("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/", add_command_callback, filedata, data, "POST");
                    file.value = file.defaultValue;
                }
                else{
                    code = btoa( $( '#commandAddCode' ).val() );
                    data['code'] = code;
                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/", add_command_callback, "POST", data);
                }
                // now clear all the boxes
                $('#commandAddDescription').val("");
                $('#commandAddHelpCmd').val("");
                $('#commandAddNeedsAdmin').prop('checked', false);
                $('#commandAddIsExit').prop('checked', false);
                $('#commandAddCode').val("");
                $('#commandAddCmd').val("");
                $('#commandAddVersion').val(1);
                //add_command_parameters_table.add_command_parameters = [];
                //add_command_transforms_table.add_command_transforms = [];

            });
            $( '#commandAddCancel' ).unbind('click').click(function(){
                var file = document.getElementById('commandAddFile');
                file.value = file.defaultValue;
                $('#commandAddDescription').val("");
                $('#commandAddHelpCmd').val("");
                $('#commandAddNeedsAdmin').prop('checked', false);
                $('#commandAddIsExit').prop('checked', false);
                $('#commandAddCode').val("");
                $('#commandAddCmd').val("");
                add_command_parameters_table.add_command_parameters = [];
                add_command_transforms_table.add_command_transforms = [];
                add_command_attack_table.add_attack_command = [];
                add_command_artifacts_table.add_command_artifact = [];
            });
            $( '#commandAddCheckCmd' ).unbind('click').click(function(){
                // make a request out to see if the command exists already or if the file exists (and command was deleted)?
                var data = httpGetSync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + p.ptype + "/check/" + $('#commandAddCmd').val());
                data_json = JSON.parse(data);
                if(data_json.hasOwnProperty("cmd")){
                    $('#commandAddDescription').val(data_json['description']);
                    $('#commandAddDescription').prop('disabled', true);
                    $('#commandAddHelpCmd').val(data_json['help_cmd']);
                    $('#commandAddHelpCmd').prop('disabled', true);
                    $('#commandAddNeedsAdmin').prop('checked', data['needs_admin']);
                    $('#commandAddNeedsAdmin').prop('disabled', true);
                    $('#commandAddIsExit').prop('checked', data['is_exit']);
                    $('#commandAddIsExit').prop('disabled', true);
                    $('#commandAddVersion').val(data['version']);
                }
                else{
                    //be sure to make everything editable and clear it all
                    $('#commandAddDescription').val("");
                    $('#commandAddDescription').prop('disabled', false);
                    $('#commandAddHelpCmd').val("");
                    $('#commandAddHelpCmd').prop('disabled', false);
                    $('#commandAddNeedsAdmin').prop('checked', false);
                    $('#commandAddNeedsAdmin').prop('disabled', false);
                    $('#commandAddIsExit').prop('checked', false);
                    $('#commandAddIsExit').prop('disabled', false);
                    $('#commandAddVersion').val(1);
                }
                if(data_json.hasOwnProperty("code")){
                    $('#commandAddCode').val(atob(data_json['code']));
                    //$('#commandAddCode').attr('disabled', true);
                }
                else{
                    $('#commandAddCode').val(p.command_template);
                    $('#commandAddCode').attr('disabled', false);
                }
                if(data_json.hasOwnProperty("params")){
                    add_command_parameters_table.add_command_parameters = data_json['params'];
                }
                else{
                    add_command_parameters_table.add_command_parameters = [];
                }
            });

        },
        edit_commands_button: function(p){
            var types = "";
            for(var i = 0; i < p.commands.length; i++){
                types = types + '<option value="' + p.commands[i]['cmd'] + '">' + p.commands[i]['cmd'] + '</option>';
            };
            $( '#commandEditCmd' ).html(types);
            //set_edit_command_params( $('#commandEditCmd').val(), p );
            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + p.ptype + "/check/" + $('#commandEditCmd').val(), set_edit_command_info_callback, "GET", null);
            $('#commandEditVersion').prop('disabled', true);
            $( '#commandEditModal' ).modal('show');
            $( '#commandEditCmd' ).unbind('change').change(function(){
                // Populate the various parts of the modal on select changes
                cmd = $(this).find("option:selected").attr('value');
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + p.ptype + "/check/" + cmd, set_edit_command_info_callback, "GET", null);
            });
            $( '#commandEditSubmit' ).unbind('click').click(function(){
                //check for changes between what we have and what's in the fields, only submit those differences
                //an uploaded file takes precidence over text in the text block
                var cmd = $('#commandEditCmd').val();
                data = {'help_cmd': $('#commandEditHelpCmd').val(), 'description': $('#commandEditDescription').val(),
                'needs_admin': $('#commandEditNeedsAdmin').is(":checked"), "is_exit": $('#commandEditIsExit').is(":checked")};
                for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
                    if(payloadtypes_table.payloadtypes[i]['ptype'] == p['ptype']){
                        payloadtypes_table.payloadtypes[i]['commands_set'].forEach(function(command){
                          if (command.cmd == cmd) {
                            var file = document.getElementById('commandEditFile');
                            if(file.files.length > 0){
                                var filedata = file.files[0];
                                uploadFileAndJSON("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + command.id, command_edit_callback, filedata, data, "PUT");
                                file.value = file.defaultValue;
                            }
                            else{
                                // only add the 'code' field if we actually changed something in the code
                                if( $( '#commandEditCode' ).val() !=  $( '#commandEditOldCode' ).val()){
                                    code = btoa( $( '#commandEditCode' ).val() );
                                    data['code'] = code;
                                }
                                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + command.id, command_edit_callback, "PUT", data);
                            }
                            //Now handle sending updates for the command parameters at the bottom
                            for(var j = 0; j < command_parameters_table.command_parameters.length; j++){
                                data = command_parameters_table.command_parameters[j];
                                if(data.hasOwnProperty('id')){
                                    //this means it's a parameter we had before, so send an update
                                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + command.id + "/parameters/" + data['id'], null, "PUT", data);
                                }
                                else if(data['name'] != ""){
                                    //make sure they entered something for the name, and send a POST to create the parameter
                                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + command.id + "/parameters", null, "POST", data);
                                }
                            }
                            //Now handle sending updates for the transforms on this command
                            for(var j = 0; j < edit_command_transforms_table.add_command_transforms.length; j++){
                                data = edit_command_transforms_table.add_command_transforms[j];
                                if(data.hasOwnProperty('id')){
                                    //we need to send an update for this one
                                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/bycommand/" + data.id, null, "PUT", data);
                                }
                                else if(data['name'] != "select_one"){
                                    //we need to create a new entry for this one
                                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/bycommand/" + command.id, null, "POST", data);
                                }
                            }
                            //Now handle sending updates for the att&ck techniques with this command
                            for(var j = 0; j < edit_command_attack_table.add_attack_command.length; j++){
                                data = edit_command_attack_table.add_attack_command[j];
                                if(!data.hasOwnProperty('command_id')){
                                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + command.id + "/mitreattack/" + data['t_num'], null, "POST", data);
                                }
                                else{
                                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + command.id + "/mitreattack/" + data['t_num'], null, "PUT", data);
                                }
                            }
                            //Now handle sending updates for the artifacts with this command
                            for(var j = 0; j < edit_command_artifacts_table.add_command_artifact.length; j++){
                                data = edit_command_artifacts_table.add_command_artifact[j];
                                console.log(data);
                                if(!data.hasOwnProperty("id")){
                                    //we're creating a new artifact_template mapping
                                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + command.id + "/artifact_templates", create_or_edit_command_artifacts_callback, "POST", data);
                                }else{
                                    //we're updating an artifact in some way
                                    httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + command.id + "/artifact_templates/" + data['id'], create_or_edit_command_artifacts_callback, "PUT", data);
                                }
                            }
                          }
                        });
                    }
                }
            });
            $( '#commandEditCancel' ).unbind('click').click(function(){
                var file = document.getElementById('commandEditFile');
                file.value = file.defaultValue;
            });
        },
        remove_commands_button: function(p){
            var types = "";
            for(var i = 0; i < p.commands.length; i++){
                types = types + '<option value="' + p.commands[i]['cmd'] + '">' + p.commands[i]['cmd'] + '</option>';
            };
            $( '#commandRemoveList' ).html(types);
            $( '#commandRemoveModal' ).modal('show');
            $( '#commandRemoveSubmit' ).unbind('click').click(function(){
                commands_to_remove = $( '#commandRemoveList' ).val();
                for(var i = 0; i < commands_to_remove.length; i++){
                    for(var j = 0; j < p.commands.length; j++){
                        if(p.commands[j]['cmd'] == commands_to_remove[i]){
                            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + p.commands[j]['id'], remove_commands_callback, "DELETE", null);
                        }
                    }
                }
            });
        },
        export_commands_button: function(p){
            window.open("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + p.ptype + "/export", '_blank').focus();
        },
        edit_create_transforms_button: function(p, index){
            //I do this parse/unparse thing so that i can get a deep copy of the dictionary without holding onto vue's getters and setters
            //  if you don't do this, then you'll get updates reflect in both places at the same time
            payloadEditCreateTransforms_Table.createTransforms = JSON.parse(JSON.stringify( payloadtypes_table.payloadtypes[index]['create']));;
            $( '#payloadEditCreateTransformsModal' ).modal('show');
            $( '#payloadEditCreateTransformsSubmit' ).unbind('click').click(function(){
                //Now go through to see what our final state looks like and submit put/post requests as necessary to update
                //reverse the order of our table by the 'order' index and work backwards
                payloadEditCreateTransforms_Table.createTransforms.sort((a,b) =>(b.order > a.order) ? 1 : ((a.order > b.order) ? -1 : 0));
                for(i in payloadEditCreateTransforms_Table.createTransforms){
                    if(payloadEditCreateTransforms_Table.createTransforms[i]['name'] != "select_one"){
                        if(payloadEditCreateTransforms_Table.createTransforms[i].hasOwnProperty('id')){
                            //This is something we've seen before, we just need to send an update request if it changed
                            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/" + payloadEditCreateTransforms_Table.createTransforms[i]['id'], update_create_transform_options_callback, "PUT", payloadEditCreateTransforms_Table.createTransforms[i]);
                        }
                        else{
                            //This is a new transform we're adding to the chain, make a new POST
                            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/bytype/" + p.ptype, add_new_create_transform_options_callback, "POST", payloadEditCreateTransforms_Table.createTransforms[i]);
                        }
                    }
                }
            });
        },
        edit_load_transforms_button: function(p, index){
            //I do this parse/unparse thing so that i can get a deep copy of the dictionary without holding onto vue's getters and setters
            //  if you don't do this, then you'll get updates reflect in both places at the same time
            payloadEditLoadTransforms_Table.loadTransforms = JSON.parse(JSON.stringify( payloadtypes_table.payloadtypes[index]['load']));;
            $( '#payloadEditLoadTransformsModal' ).modal('show');
            $( '#payloadEditLoadTransformsSubmit' ).unbind('click').click(function(){
                //Now go through to see what our final state looks like and submit put/post requests as necessary to update
                //reverse the order of our table by the 'order' index and work backwards
                payloadEditLoadTransforms_Table.loadTransforms.sort((a,b) =>(b.order > a.order) ? 1 : ((a.order > b.order) ? -1 : 0));
                for(i in payloadEditLoadTransforms_Table.loadTransforms){
                    if(payloadEditLoadTransforms_Table.loadTransforms[i]['name'] != "select_one"){
                        if(payloadEditLoadTransforms_Table.loadTransforms[i].hasOwnProperty('id')){
                            //This is something we've seen before, we just need to send an update request if it changed
                            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/" + payloadEditLoadTransforms_Table.loadTransforms[i]['id'], update_load_transform_options_callback, "PUT", payloadEditLoadTransforms_Table.loadTransforms[i]);
                        }
                        else{
                            //This is a new transform we're adding to the chain, make a new POST
                            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/bytype/" + p.ptype, add_new_load_transform_options_callback, "POST", payloadEditLoadTransforms_Table.loadTransforms[i]);
                        }
                    }
                }
            });
        }
    },
    delimiters: ['[[', ']]']
});
function create_or_edit_command_artifacts_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    console.log(data);
}
function set_files_edit_payloadtype_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'success'){
        payloadtypeFiles.folders = data['files'];
        httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + payloadtypeFiles.payloadtype_name + "/container_files", null, "GET", null);
    }else{
        alertTop("danger", data['error']);
    }
}
function command_edit_callback(response){
    try{
        data = JSON.parse(response);
    }
    catch(error){
        alertTop("danger", "Failed to edit command, please refresh");
        return;
    }
    if(data['status'] == "success"){
        // now update our in-mem copy of the command
        if(data.hasOwnProperty('version')) { var version = data['version']; var cmd_id = data['id'];}
        else if(data.hasOwnProperty('new_cmd_version')) { var version = data['new_cmd_version']; var cmd_id = data['command'];}

        if(version){
            payloadtypes_table.payloadtypes.forEach(function(ptype){
                ptype['commands_set'].forEach(function(cmd){
                    if(cmd_id == cmd.id){
                        return;
                    }
                });
            });
        }
    }
    else{
        alertTop("danger", data['error']);
    }
}
function update_load_transform_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] != "success"){
        alertTop("danger", "Error updating transform for loading a module: " + data['error']);
    }
    else{
        //now update it in the UI
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['payload_type']){
                for(var j = 0; j < payloadtypes_table.payloadtypes[i]['load'].length; j++){
                    if(data['id'] == payloadtypes_table.payloadtypes[i]['load'][j]['id']){
                        payloadtypes_table.payloadtypes[i]['load'][j] = data;
                        payloadtypes_table.payloadtypes[i]['load'].sort((a,b) =>(a.order > b.order) ? 1 : ((b.order > a.order) ? -1 : 0));
                        return;
                    }
                }
            }
        }
    }
}
function update_create_transform_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] != "success"){
        alertTop("danger", "Error updating a transform for creating a payload: " + data['error']);
    }
    else{
        //now update it in the UI
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['payload_type']){
                for(var j = 0; j < payloadtypes_table.payloadtypes[i]['create'].length; j++){
                    if(data['id'] == payloadtypes_table.payloadtypes[i]['create'][j]['id']){
                        payloadtypes_table.payloadtypes[i]['create'][j] = data;
                        payloadtypes_table.payloadtypes[i]['create'].sort((a,b) =>(a.order > b.order) ? 1 : ((b.order > a.order) ? -1 : 0));
                        return;
                    }
                }
            }
        }
    }
}
function add_new_load_transform_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] != "success"){
        alertTop("danger", "Error adding a new transform for loading a module: " + data['error']);
    }
    else{
        //add our new data in and sort it by order again
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['payload_type']){
                payloadtypes_table.payloadtypes[i]['load'].push(data);
                payloadtypes_table.payloadtypes[i]['load'].sort((a,b) =>(a.order > b.order) ? 1 : ((b.order > a.order) ? -1 : 0));
                return;

            }
        }
    }
}
function add_new_create_transform_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] != "success"){
        alertTop("danger", "Error adding a new transform for creating a payload: " + data['error']);
    }
    else{
        //add our new data in and sort it by order again
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['payload_type']){
                payloadtypes_table.payloadtypes[i]['create'].push(data);
                payloadtypes_table.payloadtypes[i]['create'].sort((a,b) =>(a.order > b.order) ? 1 : ((b.order > a.order) ? -1 : 0));
                return;

            }
        }
    }
}
function command_transforms_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
    }
    data['select_one'] = {"return": "", "parameter": ""};
    add_command_transforms_table.add_command_transforms = [];
    add_command_transforms_table.transformOptions = data;
    edit_command_transforms_table.add_command_transforms = [];
    edit_command_transforms_table.transformOptions = data;
}
var loadTransforms = [];
var transformOptions = {};
var payloadEditLoadTransforms_Table = new Vue({
    el: '#payloadEditLoadTransformsTable',
    data: {
        loadTransforms,
        transformOptions
    },
    methods: {
        remove_load_transform_button: function(item, index){
            this.loadTransforms.splice(index, 1);
            if(item.hasOwnProperty('id')){
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/" + item.id, remove_load_transform_options_callback, "DELETE", null);
            }
        },
        add_load_transform_button: function(){
            this.loadTransforms.push({"name": "select_one", "parameter": "", "order": this.loadTransforms.length + 1, "t_type": "load"});
        }
    },
    delimiters: ['[[', ']]']
});
var createTransforms = [];
var payloadEditCreateTransforms_Table = new Vue({
    el: '#payloadEditCreateTransformsTable',
    data: {
        createTransforms,
        transformOptions
    },
    methods: {
        remove_create_transform_button: function(item, index){
            this.createTransforms.splice(index, 1);
            if(item.hasOwnProperty('id')){
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/" + item.id, remove_create_transform_options_callback, "DELETE", null);
            }
        },
        add_create_transform_button: function(){
            this.createTransforms.push({"name": "select_one", "parameter": "", "order": this.createTransforms.length + 1, "t_type": "create"});
        }
    },
    delimiters: ['[[', ']]']
});
function remove_load_transform_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] != "success"){
        alertTop("danger", "Error removing a load module transform: " + data['error']);
    }
    else{
        //now remove it from the appropriate payloadtype's load array so it's updated in the UI
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['payload_type']){
                for(var j = 0; j < payloadtypes_table.payloadtypes[i]['load'].length; j++){
                    if(data['id'] == payloadtypes_table.payloadtypes[i]['load'][j]['id']){
                        payloadtypes_table.payloadtypes[i]['load'].splice(j, 1);
                        return;
                    }
                }
            }
        }
    }
}
function remove_create_transform_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] != "success"){
        alertTop("danger", "Error remove a create payload transform: " + data['error']);
    }
    else{
        //now remove it from the appropriate payloadtype's load array so it's updated in the UI
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['payload_type']){
                for(var j = 0; j < payloadtypes_table.payloadtypes[i]['create'].length; j++){
                    if(data['id'] == payloadtypes_table.payloadtypes[i]['create'][j]['id']){
                        payloadtypes_table.payloadtypes[i]['create'].splice(j, 1);
                        return;
                    }
                }
            }
        }
    }
}
function set_edit_code_callback(response){
    try{
        $( '#commandEditCode' ).val(atob(response));
        $( '#commandEditOldCode').val(atob(response));
    }catch(error){
        $( '#commandEditCode' ).val("");
    }
}
function set_edit_command_info_callback(response){
    try{
        data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        //console.log(data);
        set_edit_code_callback(data['code']);
        set_edit_command_parameters(JSON.stringify(data['params']));
        set_edit_command_transforms(JSON.stringify({'status':'success', 'transforms': data['transforms']}));
        set_edit_command_attack(JSON.stringify({'status': 'success', 'attack': data['attack']}));
        set_edit_command_artifact(JSON.stringify({'status': 'success', 'artifacts': data['artifacts']}));
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['payload_type']){
                payloadtypes_table.payloadtypes[i]['commands_set'].forEach(function(cmd){
                  if (cmd.cmd == data['cmd']) {
                    cmd.description = data['description'];
                    cmd.help_cmd = data['help_cmd'];
                    cmd.version = data['version'];
                    cmd.needs_admin = data['needs_admin'];
                    cmd.is_exit = data['is_exit'];
                    $( '#commandEditDescription' ).val(cmd.description);
                    $( '#commandEditHelpCmd' ).val(cmd.help_cmd);
                    $( '#commandEditVersion').val(cmd.version);
                    $( '#commandEditNeedsAdmin' ).prop('checked', cmd.needs_admin);
                    $( '#commandEditIsExit' ).prop('checked', cmd.is_exit);

                  }
                 });
             }
        }
    }else{

        alertTop("danger", data['error']);
    }

}
var command_parameters = [];
var command_parameters_table = new Vue({
    el: '#edit_command_parameters_table',
    data: {
        command_parameters
    },
    methods: {
        remove_parameter_button: function(i, p){
            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + i.command + "/parameters/" + i.id, edit_remove_parameter, "DELETE", null);
        },
        add_parameter_button: function(){
            this.command_parameters.push({"name": "", "choices": "", "type": "Select One...", "hint": "", "required": false});
        }
    },
    delimiters: ['[[',']]']
});
function set_edit_command_parameters(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data.hasOwnProperty('status')){
        alertTop("danger", "Error editing a command parameter: " + data['error']);
    }
    else{
        command_parameters_table.command_parameters = data;
        edit_command_artifacts_table.commandParameters = data;
    }
}
function set_edit_command_transforms(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        edit_command_transforms_table.add_command_transforms = data['transforms'];
    }
    else{
        alertTop("danger", data['error']);
    }
}
function set_edit_command_attack(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        edit_command_attack_table.add_attack_command = data['attack'];
    }
    else{
        alertTop("danger", data['error']);
    }
}
function set_edit_command_artifact(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        edit_command_artifacts_table.add_command_artifact = data['artifacts'];
    }
    else{
        alertTop("danger", data['error']);
    }
}
function edit_remove_parameter(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        //now find the parameter and remove it from our array
        for(var i = 0; i < command_parameters_table.command_parameters.length; i++){
            if(command_parameters_table.command_parameters[i]['id'] == data['id']){
                command_parameters_table.command_parameters.splice(i,1);
                $('#commandEditVersion').val(data['new_cmd_version']);
            }
        }
    }
    else{
        alertTop("danger", "Error removing a parameter: " + data['error']);
    }
}
var add_command_parameters = [];
var add_command_parameters_table = new Vue({
    el: '#add_command_parameters_table',
    data: {
        add_command_parameters
    },
    methods: {
        remove_parameter_button: function(i, p){
            add_command_parameters_table.add_command_parameters.splice(i, 1);
        },
        add_parameter_button: function(){
            this.add_command_parameters.push({"name": "", "choices": "", "type": "Select One...", "hint": "", "required": false});
        }
    },
    delimiters: ['[[',']]']
});
function add_command_callback(response){
    try{
        var cdata = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(cdata['status'] != "success"){
        alertTop("danger", "Error adding a command: " + cdata['error']);
    }
    //Now handle sending updates for the command parameters at the bottom
    for(var j = 0; j < add_command_parameters_table.add_command_parameters.length; j++){
        var data = add_command_parameters_table.add_command_parameters[j];
        if(data['name'] != "" && data['type'] != "Select One..."){
            //make sure they entered something for the name, and send a POST to create the parameter
            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + cdata['id'] + "/parameters", null, "POST", data);
        }
    }
    add_command_parameters_table.add_command_parameters = [];
    //Now handle sending updates for the command transforms at the bottom
    for(var i = 0; i < add_command_transforms_table.add_command_transforms.length; i++){
        var data = add_command_transforms_table.add_command_transforms[i];
        if(data['name'] != "select_one"){
            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/bycommand/" + cdata['id'], null, "POST", data);
        }
    }
    add_command_transforms_table.add_command_transforms = [];
    //Now handle sending updates for the att&ck techniques with this command
    for(var j = 0; j < add_command_attack_table.add_attack_command.length; j++){
        var data = add_command_attack_table.add_attack_command[j];
        httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + cdata['id'] + "/mitreattack/" + data['t_num'], null, "POST", data);
    }
    //Now handle sending updates for the artifact techniques with this command
    for(var j = 0; j < add_command_artifacts_table.add_command_artifact.length; j++){
        var data = add_command_artifacts_table.add_command_artifact[j];
        httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + cdata['id'] + "/artifact_templates", null, "POST", data);
    }
    add_command_attack_table.add_attack_command = [];
    add_command_artifacts_table.add_command_artifact = [];
}
function remove_commands_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        // remove the command from the appropriate payload_type commands listing
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['payload_type']){
                payloadtypes_table.payloadtypes[i]['commands_set'].forEach(function(cmd){
                  if (cmd.cmd == data['cmd']) {
                    payloadtypes_table.payloadtypes[i]['commands_set'].delete(cmd);
                    Vue.set(payloadtypes_table.payloadtypes[i], 'commands', Array.from(payloadtypes_table.payloadtypes[i]['commands_set']));
                  }
                });

            }
        }
    }
    else{
        alertTop("danger", "Error removing a command: " + data['error']);
    }
};
var add_command_transforms_table = new Vue({
    el: '#add_command_transforms_table',
    data: {
        add_command_transforms: [],
        transformOptions: {}
    },
    methods: {
        remove_command_transform_button: function(value, index){
            // we haven't registered it yet, so we can just remove it
            this.add_command_transforms.splice(index, 1);
        },
        add_command_transform_button: function(){
            this.add_command_transforms.push({"name": "select_one", "parameter": "", "order": this.add_command_transforms.length + 1, "active": true});
        }
    },
    delimiters: ['[[',']]']
});
var edit_command_transforms_table = new Vue({
    el: '#edit_command_transforms_table',
    data: {
        add_command_transforms: [],
        transformOptions: {}
    },
    methods: {
        remove_command_transform_button: function(value, index){
            // we haven't registered it yet, so we can just remove it
            if(value.hasOwnProperty('id')){
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/bycommand/" + value['id'], edit_command_transforms_remove_transform_callback, "DELETE", null);
            }
            else{
                this.add_command_transforms.splice(index, 1);
            }
        },
        add_command_transform_button: function(){
            this.add_command_transforms.push({"name": "select_one", "parameter": "", "order": this.add_command_transforms.length + 1, "active": true});
        }
    },
    delimiters: ['[[',']]']
});
function edit_command_transforms_remove_transform_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'success'){
        //it was successfully removed, so now we need to update the UI
        for(var i = 0; i < edit_command_transforms_table.add_command_transforms.length; i++){
            if(edit_command_transforms_table.add_command_transforms[i]['id'] == data['id']){
                edit_command_transforms_table.add_command_transforms.splice(i, 1);
                return;
            }
        }
    }else{
        alertTop("danger", data['status']);
    }
}

function delete_payloadtype_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'success'){
        // we need to remove the corresponding payload type from the UI
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['ptype']){
                payloadtypes_table.payloadtypes.splice(i, 1);
                return;
            }
        }
    }
    else{
        alertTop("danger", "Error deleting a payload type: " + data['error']);
    }
}
function edit_payloadtype_callback(response){
    try{
        data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
            if(payloadtypes_table.payloadtypes[i]['ptype'] == data['ptype']){
                Vue.set(payloadtypes_table.payloadtypes, i, Object.assign({}, payloadtypes_table.payloadtypes[i], data));
                return;
            }
        }
    }
    else{
        alertTop("danger", "Error editing a payload type: " + data['error']);
    }
};
var payloadtypeFiles = new Vue({
    el: '#payloadtypeEditFiles',
    data: {
        payloadtype_name: "",
        folders: []
    },
    methods: {
        delete_file_button: function(folder, file){
            if(folder.includes("/Apfell/")){
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + this.payloadtype_name + "/files/container_delete", delete_file_button_callback, "POST", {"folder": folder, "file": file});
            }else{
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + this.payloadtype_name + "/files/delete", delete_file_button_callback, "POST", {"folder": folder, "file": file});
            }
        },
        download_file_button: function(folder, file){
            if(folder.includes("/Apfell/")){
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + this.payloadtype_name + "/files/container_download?folder=" + folder + "&file=" + file, download_file_callback, "GET");
                alertTop("info", "Tasked download...");
            }
            else{
                window.open("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + this.payloadtype_name + "/files/download?folder=" + folder + "&file=" + file, "_blank");
            }
        }
    },
    delimiters: ['[[',']]']
});
function delete_file_button_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'success'){
        for(var i = 0; i < payloadtypeFiles.folders.length; i++){
            if(payloadtypeFiles.folders[i].folder == data['folder']){
                for(var j = 0; j < payloadtypeFiles.folders[i].filenames.length; j++){
                    if(data['file'] == payloadtypeFiles.folders[i].filenames[j]){
                        payloadtypeFiles.folders[i].filenames.splice(j, 1);
                        return;
                    }
                }
            }
        }
    }else{
        alertTop("danger", data['error']);
    }
}
function download_file_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'error'){
        alertTop("danger", data['error']);
    }
}
var gotCommandData = false;
function startwebsocket_payloadtypes(){
	var ws = new WebSocket('{{ws}}://{{links.server_ip}}:{{links.server_port}}/ws/payloadtypes');
	ws.onmessage = function(event){
		if(event.data != ""){
			pdata = JSON.parse(event.data);
			//prep things for loading the transformation data
			for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
			    if(payloadtypes_table.payloadtypes[i]['ptype'] == pdata['ptype']){
                    // just updating data
                    Vue.set(payloadtypes_table.payloadtypes, i, Object.assign({}, payloadtypes_table.payloadtypes[i], pdata));
                    return;
			    }
			}
			// if we get here, then we have a new payload type entry
			pdata['create'] = [];
			pdata['load'] = [];
			payloadtypes_table.payloadtypes.push(pdata);
			httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/bytype/" + pdata['ptype'], display_transforms_callback, "GET", null);
		}
		else{
		    if(!gotCommandData){
		        gotCommandData = true;
		        startwebsocket_commands();
		    }
		}
	}
	ws.onclose = function(){
		//console.log("payloads socket closed");
		alertTop("danger", "Socket closed, please reload");
	}
	ws.onerror = function(){
		//console.log("payloads socket errored");
		alertTop("danger", "Socket errored, please reload");
	}
	ws.onopen = function(){
		//console.log("payloads socket opened");
	}
};
startwebsocket_payloadtypes();
function display_transforms_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success" && data['transforms'].length > 0){
        for(var j = 0; j < payloadtypes_table.payloadtypes.length; j++){
            if(payloadtypes_table.payloadtypes[j]['ptype'] == data['transforms'][0]['payload_type']){
                for(var i = 0; i < data['transforms'].length; i++){
                    var type = data['transforms'][i]['t_type'];
                    payloadtypes_table.payloadtypes[j][type].push(data['transforms'][i]);
                }
            }
        }
    }
    else if(data['status'] == "error"){
        alertTop("danger", "Error displaying transform data: " + data['error']);
    }
}

function startwebsocket_commands(){
	var ws = new WebSocket('{{ws}}://{{links.server_ip}}:{{links.server_port}}/ws/commands');
	ws.onmessage = function(event){
		if(event.data != ""){
			cdata = JSON.parse(event.data);
			// now add the command data to the appropriate payload type
			for(var i = 0; i < payloadtypes_table.payloadtypes.length; i++){
			    if(payloadtypes_table.payloadtypes[i]['ptype'] == cdata['payload_type']){
			        // now that you have the right payloadtype, see if it has a commands set already created
			        if(!payloadtypes_table.payloadtypes[i]['commands_set']){
			            // it doesn't have a set yet, so create one
			            payloadtypes_table.payloadtypes[i]['commands_set'] = new Set();
			        }
			        payloadtypes_table.payloadtypes[i]['commands_set'].add(cdata);
			        Vue.set(payloadtypes_table.payloadtypes[i], 'commands', Array.from(payloadtypes_table.payloadtypes[i]['commands_set']));
			        // once we add in our new command, resort the array
			        payloadtypes_table.payloadtypes[i]['commands'].sort((a,b) => (a.cmd > b.cmd) ? 1 : ((b.cmd > a.cmd) ? -1 : 0));
			        //payloadtypes_table.payloadtypes[i]['commands'] = Array.from(payloadtypes_table.payloadtypes[i]['commands_set']);
			    }
			}
			//payloadtypes_table.payloadtypes.push(pdata);
		}
	}
	ws.onclose = function(){
		//console.log("payloads socket closed");
		alertTop("danger", "Socket closed, please reload");
	}
	ws.onerror = function(){
		//console.log("payloads socket errored");
		alertTop("danger", "Socket errored, please reload");
	}
	ws.onopen = function(){
		//console.log("payloads socket opened");
	}
};
function create_payloadtype_callback(response){
    try{
        data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'error'){
        alertTop("danger", "Error creating new payload type: " + data['error']);
    }
}

function create_payloadtype_button(){
    $( '#payloadtypeCreatePtype' ).val('');
    $( '#payloadtypeCreateFileExtension' ).val('');
    $('#payloadtypeCreateCommandTemplate').val('');
    $('#payloadtypeCreateExecuteHelp').val('');
    if( $('#payloadtypeCreateWrapper').is(":checked")){
        $( '#payloadtypeCreateWrapper' ).click();
    }
    if( $('#payloadtypeCreateExternal').is(":checked")){
        $( '#payloadtypeCreateExternal' ).click();
    }
    $( '#payloadtypeCreateModal' ).modal('show');
    $( '#payloadtypeCreateWrapper').unbind('click').click(function(){
        if( $('#payloadtypeCreateWrapper').is(":checked")){
            $('#payloadtypeCreateWrappedPayloadTypeRow').prop("hidden", false);
        }
        else{
            $('#payloadtypeCreateWrappedPayloadTypeRow').prop("hidden", true);
        }
    });
    $( '#payloadtypeCreateSupportedOS').val('');
    $( '#payloadtypeCreateSubmit' ).unbind('click').click(function(){
        var data = {"ptype": $( '#payloadtypeCreatePtype' ).val(),
        "file_extension": $( '#payloadtypeCreateFileExtension').val()};
        data["wrapper"]= $('#payloadtypeCreateWrapper').is(":checked");
        data['command_template'] = $('#payloadtypeCreateCommandTemplate').val();
        data['supported_os'] = $('#payloadtypeCreateSupportedOS').val();
        data['execute_help'] = $('#payloadtypeCreateExecuteHelp').val();
        data['external'] = $('#payloadtypeCreateExternal');
        if($('#payloadtypeCreateWrapper').is(":checked")){
            data["wrapped_payload_type"]= $('#payloadtypeCreateWrappedPayloadType').val();
        }
        var file = document.getElementById('payloadtypeCreateUploadFiles');
        if(file.files.length > 0){
            var filedata = file.files;
            uploadFileAndJSON("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/", null, filedata, data, "POST");
            file.value = file.defaultValue;
        }
        else{
            httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/", create_payloadtype_callback, "POST", data);
        }
    });
};
function import_payload_button(p){
    $( '#commandImportModal' ).modal('show');
    $( '#commandImportSubmit' ).unbind('click').click(function(){
        var file = document.getElementById('commandImportFile');
        var filedata = file.files[0];
        uploadFile("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/import", import_payload_button_callback, filedata);
    });
}
function import_payload_button_callback(response){
    var new_window = window.open("", "_blank");
    new_window.document.write(response);
    new_window.focus();
};
function set_wrapped_payload_type_options(response){
    try{
        var types = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    var option_string = "";
    for(var i = 0; i < types.length; i++){
        option_string = option_string + "<option name='" + types[i]['ptype'] + "'>" + types[i]['ptype'] + "</option>";
    }
    $('#payloadtypeCreateWrappedPayloadType').html(option_string);
    $('#payloadtypeEditWrappedPayloadType').html(option_string);
};
function set_transform_options(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    data['select_one'] = {"name": "select_one", "return": "", "prior_output": ""};
    payloadEditLoadTransforms_Table.transformOptions = data;
    payloadEditCreateTransforms_Table.transformOptions = data;

}
var edit_command_attack_table = new Vue({
    el: '#edit_command_attack_table',
    data: {
        add_attack_command: [],
        attackOptions: []
    },
    methods: {
        remove_command_attack_button: function(value, index){
            // we haven't registered it yet, so we can just remove it
            if(value.hasOwnProperty('command_id')){
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + value['command_id'] + "/mitreattack/" + value['t_num'], edit_command_attack_remove_attack_callback, "DELETE", null);
            }
            else{
                this.add_attack_command.splice(index, 1);
            }
        },
        add_command_attack_button: function(){
            this.add_attack_command.push({"name": this.attackOptions[0].name, "t_num": this.attackOptions[0].t_num});
        }
    },
    delimiters: ['[[',']]']
});

function edit_command_attack_remove_attack_callback(response){
    try{
        data = JSON.parse(response)
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'success'){
        for(var i = 0; i < edit_command_attack_table.add_attack_command.length; i++){
            if(data['t_num'] == edit_command_attack_table.add_attack_command[i]['t_num']){
                edit_command_attack_table.add_attack_command.splice(i, 1);
                return;
            }
        }
    }else{
        alertTop("danger", data['error']);
    }
}
var add_command_attack_table = new Vue({
    el: '#add_command_attack_table',
    data: {
        add_attack_command: [],
        attackOptions: []
    },
    methods: {
        remove_command_attack_button: function(value, index){
            // we haven't registered it yet, so we can just remove it
            this.add_attack_command.splice(index, 1);
        },
        add_command_attack_button: function(){
            this.add_attack_command.push({"name": this.attackOptions[0].name, "t_num": this.attackOptions[0].t_num});
        }
    },
    delimiters: ['[[',']]']
});
function command_attack_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'success'){
        data['attack'].sort((a,b) => (a.t_num > b.t_num) ? 1 : ((b.t_num > a.t_num) ? -1 : 0));
        edit_command_attack_table.attackOptions = data['attack'];
        add_command_attack_table.attackOptions = data['attack'];
    }else{
        alertTop("danger", data['error']);
    }

}
var edit_command_artifacts_table = new Vue({
    el: '#edit_command_artifacts_table',
    data: {
        add_command_artifact: [],
        baseArtifacts: [],
        commandParameters: []
    },
    methods: {
        remove_command_artifact_button: function(value, index){
            if(value.hasOwnProperty('command_id')){
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/commands/" + value['command_id'] + "/artifact_templates/" + value['id'], edit_command_artifact_remove_artifact_callback, "DELETE", null);
            }
            else{
                this.add_command_artifact.splice(index, 1);
            }
        },
        add_command_artifact_button: function(){
            this.add_command_artifact.push({"artifact": this.baseArtifacts[0]['id'], "command_parameter": -1, "artifact_string": "", "replace_string": ""});
        }
    },
    delimiters: ['[[', ']]']
});
function edit_command_artifact_remove_artifact_callback(response){
    try{
        data = JSON.parse(response)
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == 'success'){
        for(var i = 0; i < edit_command_artifacts_table.add_command_artifact.length; i++){
            if(data['id'] == edit_command_artifacts_table.add_command_artifact[i]['id']){
                edit_command_artifacts_table.add_command_artifact.splice(i, 1);
                return;
            }
        }
    }else{
        alertTop("danger", data['error']);
    }
}
var add_command_artifacts_table = new Vue({
    el: '#add_command_artifacts_table',
    data: {
        add_command_artifact: [],
        baseArtifacts: [],
        commandParameters: []
    },
    methods: {
        remove_command_artifact_button: function(value, index){
            this.add_command_artifact.splice(index, 1);
        },
        add_command_artifact_button: function(){
            this.add_command_artifact.push({"artifact": this.baseArtifacts[0]['id'], "command_parameter": -1, "artifact_string": "", "replace_string": ""});
        }
    },
    delimiters: ['[[', ']]']
});
function command_artifacts_options_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] == "success"){
        edit_command_artifacts_table.baseArtifacts = data['artifacts'];
        add_command_artifacts_table.baseArtifacts = data['artifacts'];
    }else{
        alertTop("danger", data['error']);
    }
}
httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/", set_wrapped_payload_type_options, "GET", null);
httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/options", set_transform_options, "GET", null);
httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/transforms/bycommand/options", command_transforms_options_callback, "GET", null);
httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/mitreattack/listing", command_attack_options_callback, "GET", null);
httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/artifacts", command_artifacts_options_callback, "GET", null);

function container_heartbeat_check(){
    var date = new Date();
    var now = date.getTime() + date.getTimezoneOffset() * 60000;;
    for(var i = 0; i < payloadtypes_table.payloadtypes.length; i ++){
        var heartbeat = new Date(payloadtypes_table.payloadtypes[i].last_heartbeat);
        var difference =  (now - heartbeat.getTime() ) / 1000;
        if(difference < 30){
            payloadtypes_table.payloadtypes[i]['container_running'] = true;
        }else{
            if(payloadtypes_table.payloadtypes[i]['container_running'] == true){
                // if it's currently set to running, let's change it in the db that it's down
                httpGetAsync("{{http}}://{{links.server_ip}}:{{links.server_port}}{{links.api_base}}/payloadtypes/" + payloadtypes_table.payloadtypes[i]['ptype'], change_heartbeat_callback, "PUT", {"container_running": false});
            }
            payloadtypes_table.payloadtypes[i]['container_running'] = false;
        }
    }
}
function change_heartbeat_callback(response){
    try{
        var data = JSON.parse(response);
    }catch(error){
        alertTop("danger", "Session expired, please refresh");
        return;
    }
    if(data['status'] != "success"){
        alertTop("danger", data['error']);
    }
}
setInterval(container_heartbeat_check, 500);
function startwebsocket_rabbitmq(){
	var ws = new WebSocket('{{ws}}://{{links.server_ip}}:{{links.server_port}}/ws/rabbitmq/pt_status');
	ws.onmessage = function(event){
		if(event.data != ""){
			cdata = JSON.parse(event.data);
			//console.log(cdata);
			routing_pieces = cdata['routing_key'].split(".");
			if(routing_pieces[3] == "listfiles"){
			    if(routing_pieces[4] == "success"){
			        body = JSON.parse(cdata['body']);
			        for(var i = 0; i < body.length; i++){
			            payloadtypeFiles.folders.push(body[i]);
                    }
			    }
			}else if(routing_pieces[3] == "getfile"){
			    data = JSON.parse(atob(cdata['body']));
                clearAlertTop();
                download_from_memory(data['filename'], data['data']);
			}else if(routing_pieces[3] == "removefile"){
			    data = JSON.parse(cdata['body']);
			    for(var i = 0; i < payloadtypeFiles.folders.length; i++){
                    if(payloadtypeFiles.folders[i].folder == data['folder']){
                        for(var j = 0; j < payloadtypeFiles.folders[i].filenames.length; j++){
                            if(data['file'] == payloadtypeFiles.folders[i].filenames[j]){
                                payloadtypeFiles.folders[i].filenames.splice(j, 1);
                                return;
                            }
                        }
                    }
                }

			}
		}
	}
	ws.onclose = function(){
		//console.log("payloads socket closed");
		alertTop("danger", "Socket closed, please reload");
	}
	ws.onerror = function(){
		//console.log("payloads socket errored");
		alertTop("danger", "Socket errored, please reload");
	}
	ws.onopen = function(){
		//console.log("payloads socket opened");
	}
};
startwebsocket_rabbitmq();