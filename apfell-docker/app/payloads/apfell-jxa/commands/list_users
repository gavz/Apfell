exports.list_users = function(task, command, params){
	all_users = [];
	var method = "api";
	var gid = -1;
	var groups = false;
	if(params.length > 0){
	    data = JSON.parse(params);
        if(data.hasOwnProperty('method') && data['method'] != ""){
            method = data['method'];
        }
        if(data.hasOwnProperty('gid') && data['gid'] != ""){
            gid = data['gid'];
        }
        if(data.hasOwnProperty("groups") && data['groups'] != ""){
            groups = data['groups'];
        }
	}
	if(method == "jxa"){
		var users = Application("System Events").users;
		for (var i = 0; i < users.length; i++){
			var info = "Name: " + users[i].name() +
			"\\nFullName: " + users[i].fullName() +
			"\\nhomeDirectory: " + users[i].homeDirectory() +
			"\\npicturePath: " + users[i].picturePath();
			all_users.push(info);
		}
		return JSON.stringify(all_users, null, 2);
	}
	else if(method == "api"){
        ObjC.import('Collaboration');
        ObjC.import('CoreServices');
        if(gid == -1){
            var defaultAuthority = $.CSGetLocalIdentityAuthority();
            if(groups){
                var identityClass = 2; //enumerate groups
                all_users = {}; // we will want to do a dictionary so we can group the members by their GID
            }
            else{
                var identityClass = 1; //enumerate users
            }
            var query = $.CSIdentityQueryCreate($(), identityClass, defaultAuthority);
            var error = Ref();
            $.CSIdentityQueryExecute(query, 0, error);
            var results = $.CSIdentityQueryCopyResults(query);
            var numResults = parseInt($.CFArrayGetCount(results));
            results = results.js;
            for(var i = 0; i < numResults; i++){
                var identity = results[i];
                var idObj = $.CBIdentity.identityWithCSIdentity(identity);
                if(groups){
                    //if we're looking at groups, then we have a different info to print out
                    all_users[idObj.posixGID] = [];
                    var members = idObj.memberIdentities.js;
                    for(var j = 0; j < members.length; j++){
                        var info = "POSIXName(ID): " + members[j].posixName.js + "(" + members[j].posixUID + "), LocalAuthority: " +  members[j].authority.localizedName.js + ", fullName: " + members[j].fullName.js +
                        "\\nEmails: " + members[j].emailAddress.js + ", isHiddenAccount: " + members[j].isHidden + ", Enabled: " + members[j].isEnabled + ", Aliases: " + ObjC.deepUnwrap(members[j].aliases) + ", UUID: " + members[j].UUIDString.js + "\\n";
                        all_users[idObj.posixGID].push(info);
                    }
                }
                else{
                    var info = "POSIXName(ID): " + idObj.posixName.js + "(" + idObj.posixUID + "), LocalAuthority: " +  idObj.authority.localizedName.js + ", fullName: " + idObj.fullName.js +
                    "\\nEmails: " + idObj.emailAddress.js + ", isHiddenAccount: " + idObj.isHidden + ", Enabled: " + idObj.isEnabled + ", Aliases: " + ObjC.deepUnwrap(idObj.aliases) + ", UUID: " + idObj.UUIDString.js + "\\n";
                    all_users.push(info);
                }
            }
        }
        else{
            var defaultAuthority = $.CBIdentityAuthority.defaultIdentityAuthority;
            var group = $.CBGroupIdentity.groupIdentityWithPosixGIDAuthority(gid, defaultAuthority);
            var results = group.memberIdentities.js;
            var numResults = results.length;
            for(var i = 0; i < numResults; i++){
                var idObj = results[i];
                var info = "POSIXName(ID): " + idObj.posixName.js + "(" + idObj.posixUID + "), LocalAuthority: " +  idObj.authority.localizedName.js + ", fullName: " + idObj.fullName.js +
                "\\nEmails: " + idObj.emailAddress.js + ", isHiddenAccount: " + idObj.isHidden + ", Enabled: " + idObj.isEnabled + ", Aliases: " + ObjC.deepUnwrap(idObj.aliases) + ", UUID: " + idObj.UUIDString.js + "\\n";
                all_users.push(info);
            }
        }

        return JSON.stringify(all_users, null, 2);
	}
	else{
	    return "Method not known";
	}
};
COMMAND_ENDS_HERE
