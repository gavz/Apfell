{
  "all_api":[
    {
      "name": "REST Components",
      "api": [
        {
          "POST": "/auth",
          "explanation": "Authenticate to the server to create a new JWT (JSON Web Token) for you to use for a period of time",
          "cli": "curl -X POST -d '{\"username\":\"apfell_admin\", \"password\": \"apfell_password\"}' http://localhost/auth",
          "parameters": [
            {
              "name": "username",
              "description": "The username you want to log in with",
              "requirements": "This is a required field."
            },
            {
              "name": "password",
              "description": "The corresponding plain-text password for the specified user",
              "requirements": "This is a required field"
            }
          ],
          "output": ""
        },
        {
          "GET": "/me",
          "explanation": "Get information about yourself based on the JWT you provide",
          "cli": "curl -H \"Authorization: Bearer JWT_HERE\" http://localhost/me",
          "output": ""
        },
        {
          "GET": "/verify",
          "explanation": "Verify that the provided JWT is valid",
          "cli": "curl -H \"Authorization: Bearer JWT_HERE\" http://localhost/verify",
          "output": ""
        },
        {
          "POST": "/refresh",
          "explantion": "If your authentication_token times out, then you'll need to use your refresh token to get a new authentication token",
          "cli": "curl -H \"Authorization: Bearer JWT_HERE\" -X POST -d '{\"refresh_token\": \"refresh_token_here\"}' http://localhost/refresh",
          "parameters": [
            {
              "name": "refresh_token",
              "description": "The refresh token provided when you did the initial authentication to /auth",
              "requirements": "This is a required field. You must also provide your authorization token in the Header as indicated, or you'll fail to get a new token"
            }
          ],
          "output": ""
        }
      ]
    },
    {
      "name": "Analytics",
      "api": [
        {
          "GET": "API_BASE/analytics/callback_tree",
          "explanation": "Get a basic callback tree for active callbacks",
          "cli": "curl http://localhostAPI_BASE/analytics/callback_tree",
          "output": "text output such as: \ncody@codys-mbp(70209): spearphish \ncody@codys-macbook-pro.local(70234): spearphish \n╚══ cody@codys-mbp(70235): apfell_admin on 14 using spawn shell_api oneliner"
        },
        {
          "POST": "API_BASE/analytics/callback_tree",
          "explanation": "Get a basic callback tree for active callbacks",
          "cli": "curl -X POST -d '{\"inactive\": \"True\", \"strikethrough\": \"True\"}' http://localhostAPI_BASE/analytics/callback_tree",
          "parameters":[
            {
              "name": "inactive",
              "description": "T/F to include callbacks that are no longer active for the current operation",
              "requirements": "This is an optional parameter"
            },
            {
              "name": "strikethrough",
              "description": "T/F to strikethrough inactive callacks",
              "requirements": "This is an optional parameter"
            }
          ],
          "output": "text output such as: \ncody@codys-mbp(70209): spearphish \ncody@codys-macbook-pro.local(70234): CALLBACK DEAD spearphish \n╚══ cody@codys-mbp(70235): apfell_admin on 14 using spawn shell_api oneliner"
        },
        {
          "GET": "API_BASE/analytics/payload_tree",
          "explanation": "Get a basic tree relating callbacks and payloads together",
          "cli": "curl http://localhostAPI_BASE/analytics/payload_tree",
          "output": "text output such as: \napfell_admin's apfell-jxa payload with default c2 profile with tag: spearphish \n╚══ cody@codys-mbp(70209): spearphish \napfell_admin's apfell-jxa payload with default c2 profile with tag: apfell_admin on 14 using spawn shell_api oneliner \n╚══ cody@codys-mbp(70235): apfell_admin on 14 using spawn shell_api oneliner"
        },
        {
          "POST": "API_BASE/analytics/payload_tree",
          "explanation": "Get a basic tree relating callbacks and payloads together",
          "cli": "curl -X POST -d '{\"inactive\": \"True\", \"strikethrough\": \"True\"}' http://localhostAPI_BASE/analytics/payload_tree",
          "parameters":[
            {
              "name": "inactive",
              "description": "T/F to include callbacks that are no longer active for the current operation",
              "requirements": "This is an optional parameter"
            },
            {
              "name": "strikethrough",
              "description": "T/F to strikethrough inactive callacks",
              "requirements": "This is an optional parameter"
            }
          ],
          "output": "text output such as: \napfell_admin's apfell-jxa payload with default c2 profile with tag: spearphish \n╚══ cody@codys-mbp(70209): spearphish \napfell_admin's apfell-jxa payload with default c2 profile with tag: apfell_admin on 14 using spawn shell_api oneliner \n╚══ cody@codys-mbp(70235): apfell_admin on 14 using spawn shell_api oneliner"
        }
      ]
    },
    {
      "name": "Attack",
      "api": [
        {
          "GET": "API_BASE/attacks/host_directory",
          "explanation": "Gets all of the additional servers ever created/stopped during a single run of Apfell",
          "cli": "curl http://localhostAPI_BASE/attacks/host_file",
          "output": "An array of JSON blobs representing the currently running file hosts: [{\"port\":\"8080\",\"directory\":\"\/home\/its-a-feature\/\",\"process\":{\"args\":[\"\/usr\/bin\/python3.6\",\"-m\",\"http.server\",\"8080\"],\"encoding\":null,\"errors\":null,\"pid\":24723,\"returncode\":null,\"stderr\":null,\"stdin\":null,\"stdout\":null,\"universal_newlines\":false},\"status\":\"running\",\"encryption\":false}]"
        },
        {
          "POST": "API_BASE/attacks/host_directory",
          "explanation": "Create a new subprocess to host files that can be used via download cradles",
          "cli": "curl -X POST -d '{\"port\":8080, \"directory\":\"/tmp\"}' http://localhostAPI_BASE/attacks/host_file",
          "parameters":[
            {
              "name": "port",
              "description": "The port to bind to for a python web server",
              "requirements": "Integer for the port that currently isn't in use and the user has access to bind to"
            },
            {
              "name": "directory",
              "description": "The directory that will be served up by the web server",
              "requirements": "The directory must exist and should be identified by a full path"
            }
          ],
          "output": "A JSON blob indicating success or failure: {\"status\": \"success\"}"
        },
        {
          "DELETE": "API_BASE/attacks/host_directory/(port:INTEGER)",
          "explanation": "Find and stop the subprocess identified by a port that is serving up a web server",
          "cli": "curl -X DELETE http://localhostAPI_BASE/attacks/host_file/8080",
          "output": "A JSON blob indicating success or failure: {\"status\": \"success\"}"
        }
      ]
    },
    {
      "name": "C2Profile",
      "api": [
        {
          "GET": "API_BASE/c2profiles/",
          "explanation": "Get all c2 profiles that you can see across all of the operations you're in as well as what payload types each one supports",
          "cli": "curl http://localhostAPI_BASE/c2profiles/",
          "output": "A array of JSON blobs of all the profiles: [{\"description\":\"default RESTful C2 channel\",\"running\":true,\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":40,\"name\":\"default\",\"operator\":\"apfell_admin\",\"operation\":\"default\",\"ptype\":[\"apfell-jxa\"]}]"
        },
        {
          "GET": "API_BASE/c2profiles/current_operation",
          "explanation": "Get all the c2 profiles that you can see for the current operation",
          "cli": "curl http://localhostAPI_BASE/c2profiles/current_operation",
          "output": "A array of JSON blobs of all the profiles: [{\"description\":\"default RESTful C2 channel\",\"running\":true,\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":40,\"name\":\"default\",\"operator\":\"apfell_admin\",\"operation\":\"default\",\"ptype\":[\"apfell-jxa\"]}]"
        },
        {
          "GET": "API_BASE/c2profiles/type/(info:STRING)",
          "explanation": "Get all of the c2 profiles for a specific payload type",
          "cli": "curl http://localhostAPI_BASE/c2profiles/type/apfell-jxa",
          "output": "{\"status\":\"success\",\"profile\":[{\"id\":43,\"payload_type\":\"apfell-jxa\",\"payload_type_id\":44,\"c2_profile\":\"default\",\"c2_profile_id\":40,\"c2_profile_description\":\"default RESTful C2 channel\"}]}"
        },
        {
          "GET": "API_BASE/c2profiles/current_operation/type/(info:STRING)",
          "explanation": "Get all the c2 profiles for a specific payload type for the current operation",
          "cli": "curl http://localhostAPI_BASE/c2profiles/current_operation/type/apfell-jxa",
          "output": "{\"status\":\"success\",\"profile\":[{\"id\":43,\"payload_type\":\"apfell-jxa\",\"payload_type_id\":44,\"c2_profile\":\"default\",\"c2_profile_id\":40,\"c2_profile_description\":\"default RESTful C2 channel\"}]}"
        },
        {
          "POST": "API_BASE/c2profiles/",
          "explanation": "Register a new C2 profile for the current operation",
          "cli": "curl -X POST -d '{\"name\": \"twitter\", \"description\": \"uses twitter for c2\", \"payload_types\": [\"apfell-jxa\"], \"c2profileparameters\": [{\"name\": \"API Key\", \"key\": \"APIKEY\", \"hint\": \"put your api key here\"}]}' http://localhostAPI_BASE/c2profiles/",
          "parameters": [
            {
              "name": "name",
              "description": "The name of the new c2 profile",
              "requirements": "This is a required parameter and must be unique"
            },
            {
              "name": "description",
              "description": "The description of what the c2 profile is",
              "requirements": "This isn't required, but is really helpful"
            },
            {
              "name": "payload_types",
              "description": "An array of names of the payload types that this c2 profile supports",
              "requirements": "This is an array of payload types that have already been registered with the system"
            },
            {
              "name": "c2profileparameters",
              "description": "This specifies the name, key, and hint values for the different parameters that the c2 profile needs",
              "requirements": "This is optional as not all c2 profiles will necessarily have parameters"
            },
            {
              "name": "code",
              "description": "This is a base64 encoded blob for the name_server code that will be uploaded to the server",
              "requirements": "This is required if you're not uploading files through the UI and want code on disk to run"
            },
            {
              "name": "file_name",
              "description": "This is the name of the file that will be created with your code from the \"code\" section",
              "requirements": "This is required if you specified the \"code\" block as well, it should be name_server, but you can upload multiple files if needed. Only the name_server file will be executed by the server though"
            }

          ],
          "output": "A successful status and a JSON representation of the new c2profile that was created"
        },
        {
          "PUT": "API_BASE/c2profiles/(info:STRING)",
          "explanation": "Update an already registered c2 profile for the current operation",
          "cli": "curl -X PUT -d '{\"description\": \"new description here\", \"payload_types\": [\"apfell-jxa\",\"new-type\"]}' http://localhostAPI_BASE/c2profiles/twitter",
          "parameters": [
            {
              "name": "description",
              "description": "Updated description for the c2 profile",
              "requirements": "This isn't required"
            },
            {
              "name": "payload_types",
              "description": "The list of payload types you wanted supported. If you had something here and you don't include it in the update, it will be removed.",
              "requirements": "This isn't required."
            }
          ],
          "output": "A JSON blob indicating success or failure, a json representation of the c2 profile, and a list of all the supported payload_types"
        },
        {
          "POST": "API_BASE/c2profiles/(info:STRING)/upload",
          "explanation": "Upload code for a specific registered payload type or for the main profile",
          "cli": "curl -X POST -d '{}' http://localhostAPI_BASE/c2profiles/slack",
          "output": "{\"status\": \"success\"}",
          "parameters": [
            {
              "name": "code",
              "description": "The base64 encoded blob that will be decoded and written to disk",
              "requirements": "This is a required field"
            },
            {
              "name": "file_name",
              "description": "The name of the file to write to disk",
              "requirements": "This is a required field"
            },
            {
              "name": "payload_type",
              "description": "The name of the payload type that's registered with the associated c2_profile that you're trying to upload the code for",
              "requirements": "This should be a valid payload_type name, and the payload type should already be registered with the c2 profile. If you want to upload to main profile, leave this blank"
            }
          ]
        },
        {
          "GET": "API_BASE/c2profiles/(info:STRING)/start",
          "explanation": "Start the c2 profile indicated by the name in place of \"info\"",
          "cli": "curl http://localhostAPI_BASE/c2profiles/twitter/start",
          "output": "JSON blob indicating a status of success or failure"
        },
        {
          "GET": "API_BASE/c2profiles/(info:STRING)/stop",
          "explanation": "Stop the c2 profile indicated by the name in place of \"info\"",
          "cli": "curl http://localhostAPI_BASE/c2profiles/twitter/stop",
          "output": "{\"status\": \"success\"}"
        },
        {
          "DELETE": "API_BASE/c2profiles/(info:STRING)",
          "explanation": "Delete the specified c2 profile from the current operation",
          "cli": "curl -X DELETE http://localhostAPI_BASE/c2profiles/twitter",
          "output": "JSON blob for success or failure, and upon success also returns the JSON blob of the c2 profile that was deleted"
        },
        {
          "GET": "API_BASE/c2profiles/(info:STRING)/parameters/",
          "explanation": "Get the parameters associated with the current operation's c2 profile indicated by \"info\"",
          "cli": "curl http://localhostAPI_BASE/c2profiles/twitter/parameters",
          "output": "{\"status\":\"success\",\"c2profileparameters\":[{\"hint\":\"http(s):\/\/domain.com\",\"id\":118,\"c2_profile\":\"default\",\"name\":\"callback host\",\"key\":\"callback_host\"},{\"hint\":\"10\",\"id\":120,\"c2_profile\":\"default\",\"name\":\"callback interval (in seconds)\",\"key\":\"callback_interval\"},{\"hint\":\"80\",\"id\":119,\"c2_profile\":\"default\",\"name\":\"callback port\",\"key\":\"callback_port\"}]}"
        },
        {
          "PUT": "API_BASE/c2profiles/(info:STRING)/parameters/(id:INTEGER)",
          "explanation": "Update a specific c2 profile's parameter indicated by its ID",
          "cli": "curl -X PUT -d '{\"name\": \"http:\/\/domain.com\", \"key\": \"domain_name\", \"hint\": \"full domain name with protocol\"}' http://localhostAPI_BASE/c2profiles/default/118",
          "parameters": [
            {
              "name": "name",
              "description": "This is the name presented to the user when they go to fill in a specific instance during payload creation",
              "requirements": "This is an optional parameter"
            },
            {
              "name": "key",
              "description": "This is the value in the c2profile code that will be stamped out with the actual value specified during payload creation",
              "requirements": "This is an optional parameter"
            },
            {
              "name": "hint",
              "description": "This is an optional example to show the user when they're creating the payload for how to structure the data",
              "requirements": "This is an optional parameter"
            }
          ],
          "output": "Success or failure 'status' JSON key and either the 'error' message or a JSON representation of the updated parameter"
        },
        {
          "POST": "API_BASE/c2profiles/(info:STRING)/parameters",
          "explanation": "Add new parameters to the c2 profile indicated by the info string",
          "cli": "curl -X POST -d '{\"name\": \"http:\/\/domain.com\", \"key\": \"domain_name\", \"hint\": \"full domain name with protocol\"}' http://localhostAPI_BASE/c2profiles/default/118",
          "parameters": [
            {
              "name": "name",
              "description": "The name that will be presented to the user",
              "requirements": "This is a required field and must be unique within the c2 profile"
            },
            {
              "name": "key",
              "description": "The actual value that will be located in the c2 profile to indicate what part will be swapped out with what the user provides when creating a payload",
              "requirements": "This is a required field and must be unique within the c2 profile"
            },
            {
              "name": "hint",
              "description": "This is a hint to the user about what format and information needs to be provided",
              "requirements": "This is an optionl parameter"
            }
          ],
          "output": "A status message in the 'status' key and either an error message or a JSON representation of the new parameter"
        },
        {
          "DELETE": "API_BASE/c2profiles/(info:STRING)/parameters/(id:INTEGER)",
          "explanation": "Delete the c2 profile parameter from the current operation's c2 profile",
          "cli": "curl -X DELETE http://localhostAPI_BASE/c2profiles/twitter/parameters/2",
          "output": "A 'status' key and either the 'error' message or a JSON representation of the parameter that was deleted"
        },
        {
          "POST": "API_BASE/c2profiles/create_instance",
          "explanation": "Create an instance of a fully configured c2 profile and save it to ./app/files/operation_name/profile_instances/c2_profile_name.extension",
          "cli": "curl -X POST -d '{\"c2_profile\":\"default\", \"ptype\":\"apfell-jxa\",\"callback host\":\"http://192.160.0.1\"...}' http://localhostAPI_BASE/c2profiles/create_instance",
          "output": "{\"status\":\"success\", \"id\":4,\"complete\":True, \"operation\":\"default\", \"operator\":\"apfell_admin\",\"total_chunks\":1,\"chunks_received\":1, \"deleted\":False,\"path\":\"/path/on/disk\"}",
          "parameters": [
            {
              "name": "c2_profile",
              "description": "Name of the c2 profile",
              "requirements": "This is a required field"
            },
            {
              "name": "ptype",
              "description": "The name of the corresponding payload type",
              "requirements": "This is a required field"
            },
            {
              "name": "*name*",
              "description": "Each parameter of the c2 profile will also go here with their \"name\" as the key and value",
              "requirements": "This is a required set of parameters"
            }
          ]
        }
      ]
    },
    {
      "name": "Callback",
      "api": [
        {
          "GET": "API_BASE/callbacks/",
          "explanation": "Gets all callback information for the current operation",
          "cli": "curl http://localhostAPI_BASE/callbacks/",
          "output": "[{\"active\":true,\"integrity_level\":2,\"init_callback\":\"10\/27\/2018 20:25:35\",\"last_checkin\":\"10\/27\/2018 23:19:35\",\"id\":15,\"user\":\"cody\",\"host\":\"codys-mbp\",\"pid\":70235,\"ip\":\"192.168.0.6\",\"description\":\"apfell_admin on 14 using spawn shell_api oneliner\",\"operator\":\"apfell_admin\",\"pcallback\":14,\"registered_payload\":\"07428d4bde02c69f1df0f7886b01e17dde759adfb94fd9c1d5641787bcb2ec4f\",\"payload_type\":\"apfell-jxa\",\"operation\":\"default\",\"encryption_type\":null}]"
        },
        {
          "POST": "API_BASE/callbacks/",
          "explanation": "Create a new callback",
          "cli": "curl -X POST -d '{\"user\":\"mac\",\"host\":\"testmac\",\"pid\":561,\"ip\":\"192.168.12.52\",\"description\":\"initial callback\",\"uuid\":\"SHA256_UUID_HERE\"}' http://localhostAPI_BASE/callbacks/",
          "parameters":[
            {
              "name": "user",
              "description": "The user account under which the payload is running.",
              "requirements": "This is required."
            },
            {
              "name": "host",
              "description": "The hostname of the machine on which the payload is running.",
              "requirements": "This is required."
            },
            {
              "name": "pid",
              "description": "The process id of the current payload running on the victim.",
              "requirements": "This is required."
            },
            {
              "name": "ip",
              "description": "The local IP of the machine we're operating on as a string.",
              "requirements": "This is required."
            },
            {
              "name": "description",
              "description": "This is the description of the specific callback.",
              "requirements": "This is optional, but can be helpful."
            },
            {
              "name": "uuid",
              "description": "This is the uuid of the payload which created this callback.",
              "requirements": "This is always required since this tells us a bit more information about the payload and helps track it."
            },
            {
              "name": "encryption_type",
              "description": "the type of encryption being used to secure the comms of this callback. This is typically set by the c2 profile that sits in the middle of these RESTful requests",
              "requirements": "This is an optional parameter, but just takes a string and should be meaningful to the associated c2 profile"
            },
            {
              "name": "decryption_key",
              "description": "base64 encoded key used to decrypt the messages for this callback",
              "requirements": "This is required if there is an encryption_type and encryption_key"
            },
            {
              "name": "encryption_key",
              "description": "base64 encoded key used to encrypt the messages for this callback",
              "requirements": "This is required if there is an encryption_type and decryption_key"
            }
          ],
          "output": "A JSON blob indicating a 'status' of success or error and either an error message of the JSON blob of this callback's information"
        },
        {
          "GET": "API_BASE/callbacks/(id:INTEGER)",
          "explanation": "Get the callback information for a single callback identified by the specific ID.",
          "cli": "curl http://localhostAPI_BASE/callbacks/1",
          "output": "{\"active\":true,\"integrity_level\":2,\"init_callback\":\"10\/27\/2018 20:25:35\",\"last_checkin\":\"10\/27\/2018 23:19:35\",\"id\":15,\"user\":\"cody\",\"host\":\"codys-mbp\",\"pid\":70235,\"ip\":\"192.168.0.6\",\"description\":\"apfell_admin on 14 using spawn shell_api oneliner\",\"operator\":\"apfell_admin\",\"pcallback\":14,\"registered_payload\":\"07428d4bde02c69f1df0f7886b01e17dde759adfb94fd9c1d5641787bcb2ec4f\",\"payload_type\":\"apfell-jxa\",\"operation\":\"default\",\"encryption_type\":null}"
        },
        {
          "PUT": "API_BASE/callbacks/(id:INTEGER)",
          "explanation": "Update some of the callback information",
          "cli": "curl -X PUT -d '{\"description\":\"long-term callback\"}' http://localhostAPI_BASE/callbacks/1",
          "parameters":[
            {
              "name":"description",
              "description": "Description of the role of the specific callback or any other note an operator has about the callback",
              "requirements": "This is optional and defaults to an empty string."
            },
            {
              "name": "active",
              "description": "Mark this callback as no longer active, but don't delete it from the database. This can typically happen when you 'remove' the callback from the UI but not exit necessarily",
              "requirements": "This is an optional parameter"
            },
            {
              "name": "encryption_type",
              "description": "the type of encryption being used to secure the comms of this callback. This is typically set by the c2 profile that sits in the middle of these RESTful requests",
              "requirements": "This is an optional parameter, but just takes a string and should be meaningful to the associated c2 profile"
            },
            {
              "name": "decryption_key",
              "description": "base64 encoded key used to decrypt the messages for this callback",
              "requirements": "This is required if there is an encryption_type and encryption_key"
            },
            {
              "name": "encryption_key",
              "description": "base64 encoded key used to encrypt the messages for this callback",
              "requirements": "This is required if there is an encryption_type and decryption_key"
            }
          ],
          "output": "A JSON blob indicating success/failure in a 'status' key and either an error message or a JSON representation of the updated callback object"
        },
        {
          "DELETE": "API_BASE/callbacks/(id:INTEGER)",
          "explanation": "Mark a specific callback as no longer active. It'll stay in the database for reporting, but will be removed from user interaction",
          "cli": "curl -X DELETE http://localhostAPI_BASE/callbacks/1",
          "output": "A JSON 'status' message and potentially a JSON representation of the callback that was just marked inactive"
        },
        {
          "GET": "API_BASE/callbacks/(id:INTEGER)/keys",
          "explanation": "Get the encryption information associated with the specified callback in the user's current operation",
          "cli": "curl http://localhostAPI_BASE/callbacks/1/keys",
          "output": "{\"status\": \"success\", \"encryption_type\": \"xor\", \"decryption_key\": \"mysecretkey\",\"encryption_key\": \"mysecretkey\"}"
        },
        {
          "GET": "API_BASE/callbacks/(id:INTEGER)/all_tasking",
          "explanation": "Get all tasking and responses for a given callback",
          "cli": "curl http://localhostAPI_BASE/callbacks/3/all_tasking",
          "output": "{\"status\":\"success\", callback_info_here, \"tasks\":[{task_info, \"responses\":[{response_info},{response_info2}]},{task_info2, \"responses\":[{response_info}]}]}"
        }
      ]
    },
    {
      "name": "Command",
      "api": [
        {
          "GET": "API_BASE/commands/",
          "explanation": "Get all of the command metadata for all commands registered across all payload types",
          "cli": "curl http://localhostAPI_BASE/commands/",
          "output": "[{\"needs_admin\":false,\"help_cmd\":\"shell {command}\",\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":1017,\"description\":\"This runs {command} in a terminal by leveraging JXA's Application.doShellScript({command})\",\"cmd\":\"shell\",\"payload_type\":\"apfell-jxa\",\"operator\":\"apfell_admin\"}...]"
        },
        {
          "GET": "API_BASE/commands/(ptype:STRING)/check/(cmd:STRING)",
          "explanation": "Get all of the information about a specific command for a specific payload (this includes getting the code if the correct file exists)",
          "cli": "curl http://localhostAPI_BASE/commands/apfell-jxa/shell",
          "output": "If the file with code exists, there will be a 'code' key with the base64 encoded code. If the command is registered in the database, a JSON blob of that information will be returned as well"
        },
        {
          "DELETE": "API_BASE/commands/(id:INTEGER)",
          "explanation": "Deletes the identified command from the database and recursively deletes the associated mappings",
          "cli": "curl -X DELETE http://localhostAPI_BASE/commands/2",
          "output": "Returns the JSON blob of the command that was deleted or an error code"
        },
        {
          "GET": "API_BASE/commands/(id:INTEGER)/code/(resp_type:STRING)",
          "explanation": "Returns the code associated with the specified command either as a file or a base64 encoded blob. If resp_type is \"file\" it'll be a file, otherwise it'll be the base64 encoded blob",
          "cli": "curl http://localhostAPI_BASE/commands/2/code/file",
          "output": "A file stream of the code associated with a command or a base64 encoded blob (no JSON)"
        },
        {
          "PUT": "API_BASE/commands/(id:INTEGER)",
          "explanation": "Update the information for the associated command",
          "cli": "curl -X PUT -d '{\"description\":\"Just updating the description here\"}' http://localhostAPI_BASE/commands/1",
          "output": "A JSON representation of the updated command (not including the code)",
          "parameters": [
            {
              "name": "description",
              "description": "A description of what the command is and how it works",
              "requirements": "This isn't a required parameter"
            },
            {
              "name": "needs_admin",
              "description": "T/F indicates if the command needs to be elevated to work",
              "requirements": "This is a requirement when creating a command, but not when updating"
            },
            {
              "name": "help_cmd",
              "description": "CLI help description for the command",
              "requirements": "Not required, but highly encouraged especially during command creation"
            },
            {
              "name": "code",
              "description": "The code that will be associated with the command as a file on disk",
              "requirements": "This is passed in as a base64 encoded blob. It isn't required on update."
            }
          ]
        },
        {
          "POST": "API_BASE/commands",
          "explanation": "Register a new command in the database. This must happen before it can be used via the CLI",
          "cli": "curl -X POST -d '{{\"needs_admin\":false,\"help_cmd\":\"shell {command}\",\"description\":\"This runs {command} in a terminal by leveraging JXA's Application.doShellScript({command})\",\"cmd\":\"shell\",\"payload_type\":\"apfell-jxa\",\"code\":\"Base64_blob_here\"}' http://localhostAPI_BASE/commands",
          "output": "A 'status' message and if successful, a JSON representation of the data stored for the command (does not include the code)",
          "parameters": [
            {
              "name": "needs_admin",
              "description": "T/F of if the command needs elevated permissions to execute",
              "requirements": "This is a required parameter"
            },
            {
              "name": "help_cmd",
              "description": "CLI Help for how to run the command and what arguments it takes",
              "requirements": "This is a required field"
            },
            {
              "name": "description",
              "description": "Description of how the command works",
              "requirements": "This is a required field"
            },
            {
              "name": "cmd",
              "description": "The one word that indicates this command",
              "requirements": "This MUST be a single word (no spaces) and must be unique within a payload type"
            },
            {
              "name": "payload_type",
              "description": "The payload type that this command is associated with",
              "requirements": "This must be specified and must correspond to an already registered payload type"
            },
            {
              "name": "code",
              "description": "This is the code that will be used for this command",
              "requirements": "This must be a base64 encoded blob"
            }
          ]
        },
        {
          "GET": "API_BASE/commands/(ptype:STRING)/export",
          "explanation": "Export a JSON representation of all the registered commands for a specific payload type so that they can be imported later if needed",
          "cli": "curl http://localhostAPI_BASE/commands/apfell-jxa/export",
          "output": "A JSON blob indicating the payload type and all of the command information (not including code) that can be used as an import later"
        },
        {
          "POST": "API_BASE/commands/import",
          "explanation": "Import a set of commands at once to be registered (not including code)",
          "cli": "curl -X POST -d '{}' http://localhostAPI_BASE/commands/import",
          "output": "Returns a list of potential errors for each command it tried to import in a JSON blob",
          "parameters": [
            {
              "name": "",
              "description": "Just send in exactly what you get back from exporting",
              "requirements": "This is a required parameter"
            }
          ]
        },
        {
          "POST": "API_BASE/commands/(id:INTEGER)/parameters",
          "explanation": "Create a new parameter for the command specified by id",
          "cli": "curl -X POST -d '{\"name\":\"password\", \"isString\": \"True\", \"required\": \"True\", \"isCredential\":\"True\",\"hint\":\"The user's plaintext password\"}' http://localhostAPI_BASE/commands/1/parameters",
          "output": "{\"status\":\"success\", \"name\":\"password\", \"isString\": \"True\", \"required\": \"True\", \"isCredential\":\"True\",\"hint\":\"The user's plaintext password\"}",
          "parameters": [
            {
              "name": "name",
              "description": "The name of the parameter that will be displayed to the user",
              "requirements": "This is a required string parameter"
            },
            {
              "name": "isString",
              "description": "A boolean variable indicating if this parameter is a String or boolean",
              "requirements": "This is a required parameter as it helps determine how information is presented to the operator"
            },
            {
              "name": "required",
              "description": "A boolean variable indicating if this parameter is required or not",
              "requirements": "This is a required parameter"
            },
            {
              "name": "hint",
              "description": "A descriptive hint or example data that will be provided to the user if \"isString\" is True",
              "requirements": "This is a required parameter if \"isString\" is True"
            },
            {
              "name": "isCredential",
              "description": "This is a boolean value to help indicate if this parameter should be leveraging information from the credential store, only valid if \"isString\" is True",
              "requirements": "This is an optional parameter if \"isString\" is True"
            }
          ]
        },
        {
          "PUT": "API_BASE/commands/(cid:INTEGER)/parameters/(pid:INTEGER)",
          "explanation": "Update a specific parameter of a specific command",
          "cli": "curl -X PUT -d '{\"required\":\"False\"}' http://localhostAPI_BASE/commands/1/parameters/15",
          "output": "{\"status\":\"success\", \"name\":\"password\", \"isString\": \"True\", \"required\": \"False\", \"isCredential\":\"True\",\"hint\":\"The user's plaintext password\"}",
          "parameters": [
            {
              "name": "name",
              "description": "The name of the parameter that will be displayed to the user",
              "requirements": "This is a required string parameter"
            },
            {
              "name": "isString",
              "description": "A boolean variable indicating if this parameter is a String or boolean",
              "requirements": "This is a required parameter as it helps determine how information is presented to the operator"
            },
            {
              "name": "required",
              "description": "A boolean variable indicating if this parameter is required or not",
              "requirements": "This is a required parameter"
            },
            {
              "name": "hint",
              "description": "A descriptive hint or example data that will be provided to the user if \"isString\" is True",
              "requirements": "This is a required parameter if \"isString\" is True"
            },
            {
              "name": "isCredential",
              "description": "This is a boolean value to help indicate if this parameter should be leveraging information from the credential store, only valid if \"isString\" is True",
              "requirements": "This is an optional parameter if \"isString\" is True"
            }
          ]
        },
        {
          "DELETE": "API_BASE/commands/(cid:INTEGER)/parameters/(pid:INTEGER)",
          "explanation": "Remove a specific parameter from a command",
          "cli": "curl -X DELETE http://localhostAPI_BASE/commands/1/parameters/12",
          "output": "{\"status\":\"success\", \"name\":\"password\", \"isString\": \"True\", \"required\": \"False\", \"isCredential\":\"True\",\"hint\":\"The user's plaintext password\"}"
        },
        {
          "GET": "API_BASE/commands/(cid:INTEGER)/parameters",
          "explanation": "Get all of the parameters associated with a specific command",
          "cli": "curl http://localhostAPI_BASE/commands/1/parameters",
          "output": "[]"
        }
      ]
    },
    {
      "name": "Operator",
      "api": [
        {
          "GET": "API_BASE/operators/",
          "explanation": "Gets all operators",
          "cli": "curl http://localhostAPI_BASE/operators/",
          "output": "[{\"admin\":true,\"active\":true,\"creation_time\":\"10\/25\/2018 17:34:27\",\"id\":1,\"username\":\"apfell_admin\",\"last_login\":\"10\/27\/2018 23:01:08\",\"current_operation\":\"default\"}]"
        },
        {
          "POST": "API_BASE/operators/",
          "explanation": "Creates a new operator account",
          "cli": "curl -X POST -d '{\"username\": \"Bob\", \"password\": \"P@ssw0rd\"}' http://localhostAPI_BASE/operators/",
          "parameters":[
            {
              "name": "username",
              "description": "This is the username for the operator.",
              "requirements": "This must be unique across all operators."
            },
            {
              "name": "password",
              "description": "This is the password used by the operator to sign into Apfell. It is hashed before being stored in the database.",
              "requirements": "It must be non-zero in length."
            }
          ],
          "output": "{\"status\": \"success\", \"admin\":false,\"active\":true,\"creation_time\":\"10\/25\/2018 17:34:27\",\"id\":1,\"username\":\"bob\",\"last_login\":\"10\/27\/2018 23:01:08\",\"current_operation\":\"\"}"
        },
        {
          "GET": "API_BASE/operators/(name:STRING)",
          "explanation": "Gets the information about a single operator by their id number. In the future this might change to use the operator's username instead.",
          "cli": "curl http://localhostAPI_BASE/operators/apfell_admin",
          "output": "{\"admin\":true,\"active\":true,\"creation_time\":\"10\/25\/2018 17:34:27\",\"id\":1,\"username\":\"apfell_admin\",\"last_login\":\"10\/27\/2018 23:01:08\",\"current_operation\":\"default\"}"
        },
        {
          "PUT": "API_BASE/operators/(name:STRING)",
          "explanation": "This updates the password and/or username for the identified operator. Only that user or a user marked as a global \"admin\" can do this. You also can't change apfell_admin's name",
          "cli": "curl -X PUT -d '{\"password\":\"NewP@55w0rd\"}' http://localhostAPI_BASE/operators/apfell_admin",
          "parameters":[
            {
              "name": "username",
              "description": "new username for the operator identified the the ID in the url.",
              "requirements": "Optional parameter, but if specified, must be unique across all operators"
            },
            {
              "name": "password",
              "description": "new password for the operator identified by the ID in the url.",
              "requirements": "Optional parameter."
            },
            {
              "name": "admin",
              "description": "Change the status of the user, T/F, to be a global admin or not. This can only be changed by somebody that already is admin",
              "requirements": "Can only be changed by a current global admin, should be True or False"
            },
            {
              "name": "active",
              "description": "Deactivate or Reactivate an account without having to delete it and break a bunch of things.",
              "requirements": "True or False on if you want the account to be active or not."
            },
            {
              "name": "current_operation",
              "description": "Set the user's current operation to this value. The user must already be added to this operation for this to work.",
              "requirements": "The user must already be added to this operation for this to work. Just supply the operation's name"
            }
          ],
          "output": "{\"admin\":true,\"active\":true,\"creation_time\":\"10\/25\/2018 17:34:27\",\"id\":1,\"username\":\"apfell_admin\",\"last_login\":\"10\/27\/2018 23:01:08\",\"current_operation\":\"default\"}"
        },
        {
          "DELETE": "API_BASE/operators/(name:STRING)",
          "explanation": "Delete the identified operator from the system. Only you or an admin can delete your account.",
          "cli": "curl -X DELETE http://localhostAPI_BASE/operators/bob",
          "output": "{\"status\": \"success\", \"username\": \"bob\"}"
        }
      ]
    },
    {
      "name": "Task",
      "api": [
        {
          "GET": "API_BASE/tasks/",
          "explanation": "Gets all of the tasks for all of the callbacks within the current operation (or for all operations if the user is a global admin)",
          "cli": "curl http://localhostAPI_BASE/tasks/",
          "output": "[{\"status\":\"processed\",\"timestamp\":\"10\/27\/2018 19:52:49\",\"id\":102,\"command\":\"shell\",\"params\":\"whoami\",\"attack_id\":null,\"callback\":13,\"operator\":\"apfell_admin\"}]"
        },
        {
          "GET": "API_BASE/tasks/callback/(cid:INTEGER)",
          "explanation": "Gets all of the tasks for a specific callback identified by the URL",
          "cli": "curl http://localhostAPI_BASE/tasks/callback/102",
          "output": "{\"status\":\"processed\",\"timestamp\":\"10\/27\/2018 19:52:49\",\"id\":102,\"command\":\"shell\",\"params\":\"whoami\",\"attack_id\":null,\"callback\":13,\"operator\":\"apfell_admin\"}"
        },
        {
          "GET": "API_BASE/tasks/callback/(cid:INTEGER)/nextTask",
          "explanation": "Gets the next task, ordered by time, for a specific callback that is marked as \"submitted\". Because the agents calling back need to be able to access this, there is no required authentication for this interface at this time",
          "cli": "curl http://localhostAPI_BASE/tasks/1/nextTask",
          "output": "{\"command\": \"shell\", \"params\": \"whoami\", \"id\": 20}"
        },
        {
          "POST": "API_BASE/tasks/callback/(cid:INTEGER)",
          "explanation": "Adds a new task for the specified callback. Unlike callbacks being spawned where we won't necessarily know who caused the callback initially, we will know who submitted each task.",
          "cli": "curl -X POST -d '{\"command\":\"shell\", \"params\": \"id\"}' http://localhostAPI_BASE/tasks/callback/1",
          "output": "{\"status\": \"success\", \"task_status\":\"submitted\",\"timestamp\":\"10\/27\/2018 19:52:49\",\"id\":102,\"command\":\"shell\",\"params\":\"whoami\",\"attack_id\":null,\"callback\":13,\"operator\":\"apfell_admin\"}",
          "parameters":[
            {
              "name": "command",
              "description": "The command to execute by the indicated callback.",
              "requirements": "This is a required field. The command must be something that the specified callback can actually execute. If it's not a valid command, it will be rejected. This is indicated by the command being registered for that callback's payload type"
            },
            {
              "name": "params",
              "description": "This is a string of the parameters required by the registered command to execute. The format here can be a normal string or even a JSON string, it all just depends on what the specific command requires",
              "requirements": "This is a required field, but can be \"\" (an empty string) if the command doesn't take any parameters. Some commands will automatically convert what you type into something that's more usable by the agent such as the \"upload\", \"download\", \"screencapture\", \"tasks\", \"clear\", and \"load\" commands."
            }
          ]
        },
        {
          "GET": "API_BASE/tasks/callback/(cid:INTEGER)/notcompleted",
          "explanation": "Get all of the tasks for the specified callback that have not been completed (status is submitted or processing)",
          "cli": "curl http://localhostAPI_BASE/tasks/callback/3/notcompleted",
          "output": "{\"status\": \"success\", \"tasks\": [{\"status\":\"submitted\",\"timestamp\":\"10\/27\/2018 19:52:49\",\"id\":102,\"command\":\"shell\",\"params\":\"whoami\",\"attack_id\":null,\"callback\":13,\"operator\":\"apfell_admin\"}]}"
        },
        {
          "POST": "API_BASE/tasks/callback/(cid:INTEGER)/clear",
          "explanation": "Remove certain tasks from the queue for a specific callback if they aren't already finished being processed",
          "cli": "curl -X POST -d '{\"task\": \"all\"}' http://localhostAPI_BASE/tasks/callback/13/clear",
          "output": "{\"status\", \"success\", \"tasks_removed\": [{\"status\":\"submitted\",\"timestamp\":\"10\/27\/2018 19:52:49\",\"id\":102,\"command\":\"shell\",\"params\":\"whoami\",\"attack_id\":null,\"callback\":13,\"operator\":\"apfell_admin\"}]}",
          "parameters": [
            {
              "name": "task",
              "description": "The tasks to clear (or \"all\" to clear all tasks for that callback)",
              "requirements": "The is the task ID number or the string \"all\" if you want to remove all currently not processed tasks for a specific callback. You must be either a global admin, operation admin, or the operator that issued the command to clear it."
            }
          ]
        },
        {
          "GET": "API_BASE/task_report_by_callback",
          "explanation": "Get all tasks and responses sorted by callback for the current operation. This is used for the view_tasks UI page",
          "cli": "curl http://localhostAPI_BASE/task_report_by_callback",
          "output": "{\"status\": \"success\", \"output\": [{callback info, \"tasks\": [{task info, \"responses\": [{response info}]}]}, {callback2, \"tasks\": [{task_info, \"responses\": [{response info}]}]}]}"
        }
      ]
    },
    {
      "name": "File",
      "api": [
        {
          "GET": "API_BASE/files",
          "explanation": "Get information about all the files registered for all the operations you're part of.",
          "cli": "curl http://localhostAPI_BASE/files",
          "output": "[{\"chunks_received\":4,\"complete\":true,\"timestamp\":\"10\/27\/2018 19:53:40\",\"id\":42,\"total_chunks\":4,\"task\":104,\"cmd\":\"screencapture\",\"path\":\"\/home\/its-a-feature\/Apfell\/app\/files\/default\/downloads\/codys-mbp\/201819:53:33\",\"operation\":\"default\"}]"
        },
        {
          "GET": "API_BASE/files/current_operation",
          "explanation": "Get information about all the files registered for your current operation (except for Screencaptures).",
          "cli": "curl http://localhostAPI_BASE/files/current_operation",
          "output": "[{\"chunks_received\":4,\"complete\":true,\"timestamp\":\"10\/27\/2018 19:53:40\",\"id\":42,\"total_chunks\":4,\"task\":104,\"cmd\":\"download\",\"path\":\"\/home\/its-a-feature\/Apfell\/app\/files\/default\/downloads\/codys-mbp\/201819:53:33\",\"operation\":\"default\"}]"
        },
        {
          "GET": "API_BASE/files/(id:INTEGER)",
          "explanation": "Get the contents of a specific file indicated by id. Currently, this isn't locked behind a login requirement because it needs to be accessed by callbacks for uploading a file to the remote computer. This might change in the future.",
          "cli": "curl http://localhostAPI_BASE/files/1",
          "output": "raw base64 encoded contents of the file"
        },
        {
          "GET": "API_BASE/files/download/(id:INTEGER)",
          "explanation": "Get the contents of a specific file indicated by id. Currently, this isn't locked behind a login requirement because it needs to be accessed by callbacks for uploading a file to the remote computer. This might change in the future.",
          "cli": "curl http://localhostAPI_BASE/files/download/1",
          "output": "raw contents of the file"
        },
        {
          "POST": "API_BASE/files",
          "explanation": "Register the initial file meta data so we know how to handle the contents of the file when they come in",
          "cli": "curl -X POST -d '{\"total_chunks\": 3, \"task\": 15}' http://localhostAPI_BASE/files",
          "output": "{\"chunks_received\": 0, \"complete\": false, \"timestamp\": \"10/27/2018 19:53:40\", \"total_chunks\": 4, \"task\": 104, \"cmd\": \"screencapture\", \"operation\": \"default\", \"path\": \"/home/its-a-feature/Apfell/app/files/default/downloads/codys-mbp/201819:53:33\", \"id\": 42}",
          "parameters": [
            {
              "name": "total_chunks",
              "description": "The total number of chunks we can expect to get, this is based on chunk size in the agent",
              "requirements": "This is a required field so we know when we're done"
            },
            {
              "name": "task",
              "description": "The task that caused this file to be created",
              "requirements": "This is a required field and is identified by task number"
            }
          ]
        },
        {
          "POST": "API_BASE/files/(id:INTEGER)",
          "explanation": "Post chunk of a file to disk after the meta data object has already been created",
          "cli": "curl -X POST -d '{\"chunk_num\": 2, \"chunk_data\": \"base64 encoded blob\"}' http://localhostAPI_BASE/files/4",
          "output": "{\"status\": \"success\", \"chunk\": 2}",
          "parameters": [
            {
              "name": "chunk_num",
              "description": "The chunk number this corresponds to",
              "requirements": "This is a required field"
            },
            {
              "name": "chunk_data",
              "description": "The base64 encoded blob that we will decode and write to disk",
              "requirements": "This is a required field"
            }
          ]
        },
        {
          "POST": "API_BASE/files/manual",
          "explanation": "Register a file manually into the database either with a local file or uploading one from a remote machine to the ./app/files/operation/ directory",
          "cli": "curl -X POST -d '{\"local_path\":True, \"path\":\"/home/its-a-feature/Desktop/file.txt\"}' http://localhostAPI_BASE/files/manual",
          "output": "{\"status\":\"success\", \"id\": 4, \"path\":/home/its-a-feature/Desktop/file.txt\", \"complete\":True, \"total_chunks\":1, \"chunks_received\":1, \"deleted\":False, \"operator\":\"apfell_admin\", \"operation\":\"default\"}",
          "parameters": [
            {
              "name": "local_path",
              "description": "A boolean value indicating if this is a file local to Apfell yet or not",
              "requirements": "This is a required field and should be True or False"
            },
            {
              "name": "code",
              "description": "Base64 encoded file that will be uploaded",
              "requirements": "This is not a required parameter (since you can upload files via the web UI as well), but if this is provided, the \"filename\" parameter is required as well"
            },
            {
              "name": "filename",
              "description": "name of the file you're uploading",
              "requirements": "This is not a required parameter (since you can upload files via the web UI as well), but this is required if \"code\" is provided"
            },
            {
              "name": "path",
              "description": "If the file is already local to the Apfell server, this is the path to that file",
              "requirements": "This is a required parameter only if the \"local_path\" parameter is True"
            }
          ]
        }
      ]
    },
    {
      "name": "Operation",
      "api": [
        {
          "GET": "API_BASE/operations",
          "explanation": "Get information about all of the operations that you're a member of or are leading",
          "cli": "curl http://localhostAPI_BASE/operations",
          "output": "[{\"admin\":\"apfell_admin\",\"members\":[\"apfell_admin\"],\"name\":\"default\",\"complete\":false}]"
        },
        {
          "GET": "API_BASE/operations/(op:STRING)",
          "explanation": "Get information about a specific operation that you're a member of or are leading",
          "cli": "curl http://localhostAPI-BASE/operations/default",
          "output": "[{\"admin\":\"apfell_admin\",\"members\":[\"apfell_admin\"],\"name\":\"default\",\"complete\":false}]"
        },
        {
          "POST": "API_BASE/operations",
          "explanation": "Create a new operation",
          "cli": "curl -X POST -d '{\"name\":\"unique name\", \"admin\": \"apfell_admin\", \"members\":[\"apfell_admin\", \"bob\"]}' http://localhostAPI_BASE/operations",
          "output": "{\"status\": \"success\", \"admin\":\"apfell_admin\",\"members\":[\"apfell_admin\", \"bob\"],\"name\":\"unique name\",\"complete\":false}",
          "parameters": [
            {
              "name": "name",
              "description": "The name of the operation",
              "requirements": "The name must be globally unique"
            },
            {
              "name": "admin",
              "description": "The name of the operator that will be admin of this operation",
              "requirements": "This must be a valid user, identified by username"
            },
            {
              "name": "members",
              "description": "The list of all members of this operation",
              "requirements": "An array of usernames of valid operators"
            }
          ]
        },
        {
          "PUT": "API_BASE/operations/(op:STRING)",
          "explanation": "Update an operation that is not marked as \"complete\"",
          "cli": "curl -X PUT -d '{\"admin\":\"apfell_admin\"}' http://localhostAPI_BASE/operations/default",
          "output": "{\"status\": \"success\", \"operators\":[\"apfell_admin\", \"bob\"], \"admin\":\"apfell_admin\", \"name\":\"unique name\",\"complete\":false}",
          "parameters": [
            {
              "name": "admin ",
              "description": "The username of the operator that should lead the operation",
              "requirements": "This is not a requirement, but should be a valid operator's username"
            },
            {
              "name": "add_users",
              "description": "The list of users to add to the operation",
              "requirements": "Not a required parameter, but should be a list of valid operator usernames"
            },
            {
              "name": "remove_users",
              "description": "The list of users to be removed from the operation",
              "requirements": "Not a required paramter, but should be a list of valid operator usernames"
            },
            {
              "name": "complete",
              "description": "T/F parameter to indicate if the operation is done or not",
              "requirements": "Not a requirement, but the boolean value if it should change"
            }
          ]
        },
        {
          "DELETE": "API_BASE/operations/(op:STRING)",
          "explanation": "Delete an operation from the database and recursively delete all the objects that depend on it. It is recommended to instead mark an operate as complete so that all of the data stays in the database.",
          "cli": "curl -X DELETE http://localhostAPI_BASE/operations/default",
          "output": "The JSON for the operation that was just deleted"
        }
      ]
    },
    {
      "name": "Database",
      "api": [
        {
          "GET": "API_BASE/database/clear_entries",
          "explanation": "Clears everything except for operations from the database",
          "cli": "curl http://localhostAPI_BASE/database/clear_entries",
          "output": ""
        },
        {
          "GET": "API_BASE/database/clear_operators",
          "explanation": "Clears operators from the database",
          "cli": "curl http://localhostAPI_BASE/database/clear_operators",
          "output": ""
        },
        {
          "GET": "API_BASE/database/clear_all_files",
          "explanation": "Clears all extra payload files created during operations in the \"payloads/operations\" folder",
          "cli": "curl http://localhostAPI_BASE/database/clear_all_files",
          "output": ""
        }
      ]
    },
    {
      "name": "Payload",
      "api": [
        {
          "GET": "API_BASE/payloads/",
          "explanation": "Gets all the registered payloads from the database if you're a global admin, otherwise returns a status error",
          "cli": "curl http://localhostAPI_BASE/payloads",
          "output": "[{\"creation_time\":\"10\/27\/2018 19:52:25\",\"id\":25,\"uuid\":\"811f973316c0737156d3df03f03776a1d505fab9f4d2425b1b860e0b23cc6e4f\",\"tag\":\"spearphish\",\"operator\":\"apfell_admin\",\"payload_type\":\"apfell-jxa\",\"pcallback\":\"null\",\"location\":\"\/home\/its-a-feature\/test.js\",\"c2_profile\":\"default\",\"operation\":\"default\",\"wrapped_payload\":\"null\"},{\"creation_time\":\"10\/27\/2018 20:25:33\",\"id\":26,\"uuid\":\"07428d4bde02c69f1df0f7886b01e17dde759adfb94fd9c1d5641787bcb2ec4f\",\"tag\":\"apfell_admin on 14 using spawn shell_api oneliner\",\"operator\":\"apfell_admin\",\"payload_type\":\"apfell-jxa\",\"pcallback\":14,\"location\":\".\/app\/payloads\/operations\/default\/07428d4bde02c69f1df0f7886b01e17dde759adfb94fd9c1d5641787bcb2ec4f.js\",\"c2_profile\":\"default\",\"operation\":\"default\",\"wrapped_payload\":\"null\"}]"
        },
        {
          "GET": "API_BASE/payloads/current_operation",
          "explanation": "Get the payload information for the current operation only",
          "cli": "curl http://localhostAPI_BASE/payloads/current_operation",
          "output": "[{\"creation_time\":\"10\/27\/2018 19:52:25\",\"id\":25,\"uuid\":\"811f973316c0737156d3df03f03776a1d505fab9f4d2425b1b860e0b23cc6e4f\",\"tag\":\"spearphish\",\"operator\":\"apfell_admin\",\"payload_type\":\"apfell-jxa\",\"pcallback\":\"null\",\"location\":\"\/home\/its-a-feature\/test.js\",\"c2_profile\":\"default\",\"operation\":\"default\",\"wrapped_payload\":\"null\"},{\"creation_time\":\"10\/27\/2018 20:25:33\",\"id\":26,\"uuid\":\"07428d4bde02c69f1df0f7886b01e17dde759adfb94fd9c1d5641787bcb2ec4f\",\"tag\":\"apfell_admin on 14 using spawn shell_api oneliner\",\"operator\":\"apfell_admin\",\"payload_type\":\"apfell-jxa\",\"pcallback\":14,\"location\":\".\/app\/payloads\/operations\/default\/07428d4bde02c69f1df0f7886b01e17dde759adfb94fd9c1d5641787bcb2ec4f.js\",\"c2_profile\":\"default\",\"operation\":\"default\",\"wrapped_payload\":\"null\"}]"
        },
        {
          "DELETE": "API_BASE/payloads/(uuid:STRING)/(fromDisk:INTEGER)",
          "explanation": "delete the specified payload from the database and optionally from disk if \"fromDisk\" is 1",
          "cli": "curl -X DELETE http://localhostAPI_BASE/payloads/811f973316c0737156d3df03f03776a1d505fab9f4d2425b1b860e0b23cc6e4f/1",
          "output": "{\"status\": \"success\", \"creation_time\":\"10\/27\/2018 19:52:25\",\"id\":25,\"uuid\":\"811f973316c0737156d3df03f03776a1d505fab9f4d2425b1b860e0b23cc6e4f\",\"tag\":\"spearphish\",\"operator\":\"apfell_admin\",\"payload_type\":\"apfell-jxa\",\"pcallback\":\"null\",\"location\":\"\/home\/its-a-feature\/test.js\",\"c2_profile\":\"default\",\"operation\":\"default\",\"wrapped_payload\":\"null\"}"
        },
        {
          "POST": "API_BASE/payloads/create",
          "explanation": "Create a new payload, register it with the database, and write it to disk",
          "cli": "curl -X POST -d '{\"payload_type\": \"apfell-jxa\", \"c2_profile\": \"default\", \"location\": \"/home/its-a-feature/test.js\", \"tag\": \"spearphishing payload with jxa payloads\", \"c2_profile_parameters\": {\"callback host\": \"http://192.168.205.131\", \"callback interval (in seconds)\": \"5\", \"callback port\": \"80\"}, \"commands\": [\"screencapture\", \"get_config\", \"load\", \"exit\"], \"wrapper\": False}' http://localhostAPI_BASE/payloads/create",
          "output": "",
          "parameters": [
            {
              "name": "payload",
              "description": "Get most of the data for a new payload from an already generated payload specified by this payload uuid",
              "requirements": "This is not a required parameter, but if it is, needs to be the uuid of a payload already registered in this operation"
            },
            {
              "name": "tag",
              "description": "A description of this payload that can be used to auto populate the description field of a callback. A way to identify this payload compared to others you generate",
              "requirements": "This is an optional parameter"
            },
            {
              "name": "payload_type",
              "description": "The name of the payload type that this payload is based off of",
              "requirements": "This is a required parameter"
            },
            {
              "name": "c2_profile",
              "description": "The name of the c2 profile that this payload uses",
              "requirements": "This is a required parameter"
            },
            {
              "name": "pcallback",
              "description": "The parent callback that's causing this payload to be generated. This allows us to do higher level tracking of which callbacks spawn new callbacks.",
              "requirements": "This is an optional parameter, but this is the ID of the callback that's spawning this payload"
            },
            {
              "name": "commands",
              "description": "If the payload type isn't a \"wrapper\" for another payload, then we need to specify the commands that will get stamped into this payload.",
              "requirements": "This is optional (maybe you don't want any functionality in your payload?), but if you do specify it, it should be a list of command names that are registered with the payload_type you're creating"
            },
            {
              "name": "location",
              "description": "the location on the apfell server where you want the output to be saved. If you don't specify this, it is saved automatically in your payloads/operation name folder with its name being the generated UUID of the payload",
              "requirements": "This is an optional parameter, but is much easier to locate and leverage if you give it a location and name"
            },
            {
              "name": "c2_profile_parameters",
              "description": "This is the name:value pair for all of the c2 profile parameters that will be used during payload creation",
              "requirements": "This is specified as {\"c2_profile_parameters\": {\"param name\": \"param value\", \"param2 name\", \"param2 value\"}}. You must include something for each parameter, even if it's just an empty string"
            },
            {
              "name": "wrapped_payload",
              "description": "This is the UUID of the already created payload that we will wrap in our new payload if our payload type is a wrapper",
              "requirements": "This is the UUID of a payload already created of the correct type specified by the payload_type and in the same operation as our current one"
            }
          ]
        },
        {
          "GET": "API_BASE/payloads/get/<pload:string>",
          "explanation": "Get the contents of a payload that's registered in the database and return it as raw output",
          "cli": "curl http://localhostAPI_BASE/payloads/get/f4f0da012da81df795e403bdbbbc69db434cc771d60a48eaaaa4f1dfaba888ab",
          "output": "<just the raw apfell-jxa payload here>"
        },
        {
          "GET": "API_BASE/payloads/bytype/(ptype:STRING)",
          "explanation": "Get all of the already created payloads for the current operation by their type. This is helpful for when you need a list of payloads to select for a new wrapper payload",
          "cli": "curl http://localhostAPI_BASE/payloads/bytype/apfell-jxa",
          "output": "{\"status\": \"success\", \"payloads\": [\"creation_time\":\"10\/27\/2018 19:52:25\",\"id\":25,\"uuid\":\"811f973316c0737156d3df03f03776a1d505fab9f4d2425b1b860e0b23cc6e4f\",\"tag\":\"spearphish\",\"operator\":\"apfell_admin\",\"payload_type\":\"apfell-jxa\",\"pcallback\":\"null\",\"location\":\"\/home\/its-a-feature\/test.js\",\"c2_profile\":\"default\",\"operation\":\"default\",\"wrapped_payload\":\"null\"]}"
        },
        {
          "GET": "API_BASE/payloads/(uuid:STRING)",
          "explanation": "Gets the metadata about a specific payload identified by the UUID. This also includes what commands were initially bundled with it when the payload was created.",
          "cli": "curl http://localhostAPI_BASE/payloads/811f973316c0737156d3df03f03776a1d505fab9f4d2425b1b860e0b23cc6e4f",
          "output": "{\"creation_time\":\"10\/27\/2018 19:52:25\",\"id\":25,\"uuid\":\"811f973316c0737156d3df03f03776a1d505fab9f4d2425b1b860e0b23cc6e4f\",\"tag\":\"spearphish\",\"operator\":\"apfell_admin\",\"payload_type\":\"apfell-jxa\",\"pcallback\":\"null\",\"location\":\"\/home\/its-a-feature\/test.js\",\"c2_profile\":\"default\",\"operation\":\"default\",\"wrapped_payload\":\"null\", \"commands\": [\"screencapture\", \"shell\", \"load\", \"exit\"]}"
        }
      ]
    },
    {
      "name": "PayloadType",
      "api": [
        {
          "GET": "API_BASE/payloadtypes/",
          "explanation": "Gets information about all of the payload types registered to apfell. These are not operation specific.",
          "cli": "curl http://localhostAPI_BASE/payloadtypes/",
          "output": "[{\"wrapper\":false,\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":44,\"ptype\":\"apfell-jxa\",\"operator\":\"apfell_admin\",\"file_extension\":\"js\",\"wrapped_payload_type\":\"null\"}]"
        },
        {
          "GET": "API_BASE/payloadtypes/(ptype:STRING)",
          "explanation": "Get information about a single specific payload type.",
          "cli": "curl http://localhostAPI_BASE/payloadtypes/apfell-jxa",
          "output": "{\"wrapper\":false,\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":44,\"ptype\":\"apfell-jxa\",\"operator\":\"apfell_admin\",\"file_extension\":\"js\",\"wrapped_payload_type\":\"null\"}"
        },
        {
          "POST": "API_BASE/payloadtypes/",
          "explanation": "Create and register a new payload type",
          "cli": "curl -X POST -d '{\"ptype\": \"apfell-macho\", \"file_extension\": \"\", \"wrapper\": \"False\"}' http://localhostAPI_BASE/payloadtypes/",
          "output": "{\"status\": \"success\",\"wrapper\":false,\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":45,\"ptype\":\"apfell-macho\",\"operator\":\"apfell_admin\",\"file_extension\":\"\",\"wrapped_payload_type\":\"null\"}",
          "parameters": [
            {
              "name": "ptype",
              "description": "The name of this payload type ",
              "requirements": "This must be globally unique within the system"
            },
            {
              "name": "file_extension",
              "description": "The file extension to use when reading in the payload type template and when outputting the payload",
              "requirements": "If the file extension is .txt, then just put txt here, the \".\" is implied. This is optional as not all payload types necessarily have or need a file extension"
            },
            {
              "name": "wrapper",
              "description": "This indicates if the payload type is a wrapper for another payload type or if it is a full payload itself",
              "requirements": "This is a True/False boolean flag that defaults to \"False\" if not specified"
            },
            {
              "name": "wrapped_payload_type",
              "description": "This is the name of the payload type that is wrapped in this one",
              "requirements": "This is a required field if the payload type is specified to be a wrapper and is just the name of the payload type"
            }
          ]
        },
        {
          "PUT": "API_BASE/payloadtypes/(ptype:STRING)",
          "explanation": "Update the information about a specific payload type",
          "cli": "curl -X POST -d '{\"file_extension\": \"\", \"wrapper\":\"False\"}' http://localhostAPI_BASE/payloadtypes/apfell-jxa",
          "output": "{\"status\": \"success\", \"wrapper\":false,\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":45,\"ptype\":\"apfell-macho\",\"operator\":\"apfell_admin\",\"file_extension\":\"\",\"wrapped_payload_type\":\"null\"}",
          "parameters": [
            {
              "name": "file_extension",
              "description": "Update the file extension for the payload type",
              "requirements": "This is an optional parameter, but you can ignore the \".\" in the extension as it's implied and put in for you"
            },
            {
              "name": "wrapper",
              "description": "Update whether or not this is a wrapper for another payload type",
              "requirements": "This is an optional parameter, but would be a True/False value"
            },
            {
              "name": "wrapped_payload_type",
              "description": "Update the payload type that's wrapped in this payload type",
              "requirements": "This is an optional parameter, but is required if you're switching the payload from a not wrapped to a wrapped payload type"
            }
          ]
        },
        {
          "POST": "API_BASE/payloadtypes/(ptype:STRING)/upload",
          "explanation": "Upload 1+ files for this payload type",
          "cli": "curl -F upload_file=@/path/to/file/to/upload http://localhostAPI_BASE/payloadtypes/apfell-jxa/upload",
          "output": "{\"status\": \"success\"}",
          "parameters": [
            {
              "name": "upload_file",
              "description": "This is the first file to be uploaded, any other file after this one should be indexed like \"upload_file_#\" where # starts at 1",
              "requirements": "This is a required field if you're going to upload a file. Only the payload type's creator or a global admin can perform this function"
            }
          ]
        },
        {
          "DELETE": "API_BASE/payloadtypes/(ptype:STRING)/(fromDisk:INTEGER)",
          "explanation": "Delete a payloadtype from the database and optionally from the disk if \"fromDisk\" is 1",
          "cli": "curl -X DELETE http://localhostAPI_BASE/apfell-macho/1",
          "output": "{\"status\": \"success\", \"compile_command\":\"\",\"wrapper\":false,\"wrapped_encoding_type\":\"\",\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":45,\"ptype\":\"apfell-macho\",\"operator\":\"apfell_admin\",\"file_extension\":\"\",\"wrapped_payload_type\":\"null\"}"
        },
        {
          "GET": "API_BASE/payloadtypes/(ptype:STRING)/commands",
          "explanation": "Get all the commands associated with a specific payload type",
          "cli": "curl http://localhostAPI_BASE/payloadtypes/apfell-jxa/commands",
          "output": "{\"status\":\"success\",\"commands\":[{\"needs_admin\":false,\"help_cmd\":\"get_config\",\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":1042,\"description\":\"Gets the current running config via the C2 class\",\"cmd\":\"get_config\",\"payload_type\":\"apfell-jxa\",\"operator\":\"apfell_admin\"},{\"needs_admin\":false,\"help_cmd\":\"load {registered_cmd_name}\",\"creation_time\":\"10\/27\/2018 19:44:44\",\"id\":1041,\"description\":\"This loads a new function into memory via the C2 channel to be used by the operator. The code will be base64 encoded and sent down with the task.\",\"cmd\":\"load\",\"payload_type\":\"apfell-jxa\",\"operator\":\"apfell_admin\"}]}"
        }
      ]
    },
    {
      "name": "Reporting",
      "api": [
        {
          "GET": "API_BASE/reporting/full_timeline",
          "explanation": "Get a full reporting timeline with no command output and ordering exactly how you'd see it at the operator screen for the current operation",
          "cli": "curl http://localhostAPI_BASE/reporting/full_timeline",
          "output": "A RAW PDF file"
        },
        {
          "POST": "API_BASE/reporting/full_timeline",
          "explanation": "Configure the full timeline reporting with a few parameters",
          "cli": "curl -X POST -d '{}' http://localhostAPI_BASE/reporting/full_timeline",
          "parameters": [
            {
              "name": "cmd_output",
              "description": "Whether or not to include command output",
              "requirements": "This is not required and defaults to false if not specified."
            },
            {
              "name": "strict",
              "description": "Determines how to process the ordering of command output that might have come out of order with other output and other new commands",
              "requirements": "This needs to be either \"task\" or \"time\" to describe how to order it. This isn't a required parameter though and will default to \"task\" if not specified."
            }
          ],
          "output": "A RAW PDF file"
        }
      ]
    },
    {
      "name": "Response",
      "api": [
        {
          "GET": "API_BASE/responses/",
          "explanation": "Get all the responses for the current operation",
          "cli": "curl http://localhostAPI_BASE/responses/",
          "output": "[{\"timestamp\":\"10\/27\/2018 19:53:40\",\"id\":253,\"response\":\"Recieved meta data: {\\\"chunks_received\\\": 0, \\\"complete\\\": false, \\\"timestamp\\\": \\\"10\/27\/2018 19:53:40\\\", \\\"total_chunks\\\": 4, \\\"task\\\": 104, \\\"cmd\\\": \\\"screencapture\\\", \\\"operation\\\": \\\"default\\\", \\\"path\\\": \\\"\/home\/its-a-feature\/Apfell\/app\/files\/default\/downloads\/codys-mbp\/201819:53:33\\\", \\\"id\\\": 42}\",\"task\":{\"status\":\"processed\",\"timestamp\":\"10\/27\/2018 19:53:33\",\"id\":104,\"command\":\"screencapture\",\"params\":\" 10\/27\/201819:53:33\",\"attack_id\":null,\"callback\":13,\"operator\":\"apfell_admin\"}}]"
        },
        {
          "GET": "API_BASE/responses/(rid:INTEGER)",
          "explanation": "Get the information for one specific response identified by its ID number",
          "cli": "curl http://localhostAPI_BASE/responses/253",
          "output": "{\"timestamp\":\"10\/27\/2018 19:53:40\",\"id\":253,\"response\":\"Recieved meta data: {\\\"chunks_received\\\": 0, \\\"complete\\\": false, \\\"timestamp\\\": \\\"10\/27\/2018 19:53:40\\\", \\\"total_chunks\\\": 4, \\\"task\\\": 104, \\\"cmd\\\": \\\"screencapture\\\", \\\"operation\\\": \\\"default\\\", \\\"path\\\": \\\"\/home\/its-a-feature\/Apfell\/app\/files\/default\/downloads\/codys-mbp\/201819:53:33\\\", \\\"id\\\": 42}\",\"task\":{\"status\":\"processed\",\"timestamp\":\"10\/27\/2018 19:53:33\",\"id\":104,\"command\":\"screencapture\",\"params\":\" 10\/27\/201819:53:33\",\"attack_id\":null,\"callback\":13,\"operator\":\"apfell_admin\"}}"
        },
        {
          "POST": "API_BASE/responses/(tid:INTEGER)",
          "explanation": "Post a response to a specific task (identified by the tid - the task ID)",
          "cli": "curl -X POST -d '{\"response\": \"aXRzLWEtZmVhdHVyZQ==\"}' http://localhostAPI_BASE/responses/15",
          "output": "{\"status\": \"success\"}",
          "parameters": [
            {
              "name": "response",
              "description": "This contains the output of the command that was tasked to execute",
              "requirements": "This is a required field. Typically this is just a string for the output of the command, but some commands have some other specific information that needs to be passed back as well. This MUST be base64 encoded."
            }
          ]
        },
        {
          "POST": "API_BASE/responses/search",
          "explanation": "Search response output across an operation for a search term or phrase",
          "cli": "curl -X POST -d '{\"search\":\"password\"}' http://localhostAPI_BASE/responses/search",
          "output": "{\"status\": \"success\", \"output\": [array of response objects]}",
          "parameters": [
            {
              "name": "search",
              "description": "The word or phrase you want to search in the responses. This is case insensitive and has wildcards on either side automatically",
              "requirements": "This is a required parameter"
            }
          ]
        }
      ]
    },
    {
      "name": "Keylog",
      "api": [
        {
          "GET": "API_BASE/keylogs/current_operation",
          "explanation": "Get keylog data for the current operation sorted by host and window title",
          "cli": "curl http://localhostAPI_BASE/keylogs/current_operation",
          "output": "{\"status\":\"success\",\"grouping\":\"host\",\"sub_grouping\":\"window\",\"keylogs\":{\"Codys-MacBook-Pro.local\":{\"Notepad\":[{\"timestamp\":\"11\/08\/2018 00:37:31\",\"id\":4,\"task\":9,\"task_command\":\"keylog\",\"keystrokes\":\"hello world\",\"window\":\"Notepad\",\"operation\":\"default\",\"user\":\"cody\",\"callback\":{\"active\":true,\"integrity_level\":2,\"init_callback\":\"11\/08\/2018 00:21:36\",\"last_checkin\":\"11\/08\/2018 00:39:16\",\"id\":1,\"user\":\"cody\",\"host\":\"Codys-MacBook-Pro.local\",\"pid\":49754,\"ip\":\"192.168.0.5\",\"description\":\"spearphish\",\"operator\":\"apfell_admin\",\"pcallback\":\"null\",\"registered_payload\":\"2c023ba28e3ead3d838612612db77231aa0f20c8dea60fee784e5d495db8e116\",\"payload_type\":\"apfell-jxa\",\"operation\":\"default\",\"encryption_type\":null}}]}}}"
        },
        {
          "POST": "API_BASE/keylogs/current_operation",
          "explanation": "Get keylog data for the current operation, but with the ability to specify how the information is grouped together",
          "cli": "curl -X POST -d '{\"grouping\": \"user\"}' http://localhostAPI_BASE/keylogs/current_operation",
          "output": "",
          "parameters": [
            {
              "name": "grouping",
              "description": "The highest level grouping for how the keylogging data is returned to the operator",
              "requirements": "This can be either \"host\" or \"user\" to describe how everything will be organized. This is an optional parameter and defaults to \"host\"."
            },
            {
              "name": "sub_grouping",
              "description": "The second level grouping for how the keylogging data is presented to the operator",
              "requirements": "This can be either \"window\" (for grouping by window title) or \"time\" (for a strict ordering by time of when the data came in). This is an optional parameter and defaults to \"window\""
            }
          ]
        },
        {
          "GET": "API_BASE/keylogs/callback/(id:INTEGER)",
          "explanation": "Get all of the keylog data registered to a specific callback",
          "cli": "curl http://localhostAPI_BASE/keylogs/callback/1",
          "output": "{\"status\":\"success\",\"callback\": 1, \"keylogs\":[{\"timestamp\":\"11\/08\/2018 00:31:21\",\"id\":3,\"task\":8,\"task_command\":\"keylog\",\"keystrokes\":\"hello world\",\"window\":\"Notepad\",\"operation\":\"default\",\"user\":\"its-a-feature\"}]}"
        }
      ]
    },
    {
      "name": "Transform",
      "api": [
        {
          "GET": "API_BASE/transforms/options",
          "explanation": "Gets all of the current transformation options available as well as their in/out information",
          "cli": "curl http://localhostAPI_BASE/transforms/options",
          "output": "{\"base64Decode\":{\"return\":\"str\",\"prior_output\":\"bytearray\"},\"base64Encode\":{\"return\":\"bytearray\",\"prior_output\":\"bytearray\"},\"combineAppend\":{\"return\":\"bytearray\",\"prior_output\":\"List[bytes]\"},\"readCommands\":{\"return\":\"List[bytes]\",\"prior_output\":\"List[str]\"}}"
        },
        {
          "GET": "API_BASE/transforms/bytype/(ptype:STRING)",
          "explanation": "Get all of the current transforms registered to a certain payload type. This includes the ones registered for payload creation and command loading",
          "cli": "curl http://localhostAPI_BASE/transforms/byptype/apfell-jxa",
          "output": "{\"status\":\"success\",\"transforms\":[{\"parameter\":\"\",\"timestamp\":\"11\/10\/2018 18:54:07\",\"id\":1,\"name\":\"readCommands\",\"order\":1,\"payload_type\":\"apfell-jxa\",\"t_type\":\"load\",\"operator\":\"apfell_admin\"},{\"parameter\":\"\",\"timestamp\":\"11\/10\/2018 18:54:07\",\"id\":2,\"name\":\"combineAppend\",\"order\":2,\"payload_type\":\"apfell-jxa\",\"t_type\":\"load\",\"operator\":\"apfell_admin\"},{\"parameter\":\"\",\"timestamp\":\"11\/10\/2018 18:54:07\",\"id\":3,\"name\":\"finish\",\"order\":3,\"payload_type\":\"apfell-jxa\",\"t_type\":\"load\",\"operator\":\"apfell_admin\"}]}"
        },
        {
          "POST": "API_BASE/transforms/bytype/(ptype:STRING)",
          "explanation": "Register a new transform for the specified payload type",
          "cli": "curl -X POST -d '{\"name\": \"readCommands\", \"order\": 1, \"t_type\": \"load\", \"parameter\": \"\"}' http://localhostAPI_BASE/transforms/byptype/apfell-jxa",
          "output": "",
          "parameters":[
            {
              "name": "name",
              "description": "The name of the transform function to call",
              "requirements": "This is a required parameter and must match the function name exactly"
            },
            {
              "name": "order",
              "description": "Which order in the sequence of transforms is this one? If order 1 and 2 already exist, and you select order 1 for this one, then the original two will move to order 2 and 3 respectively",
              "requirements": "This is a required parameter"
            },
            {
              "name": "t_type",
              "description": "This is the type of transformation this new registration belongs to for the associated payload type",
              "requirements": "This is a required parameter and right now can only be one of two things: \"load\" for loading new commands or \"create\" for transformations to do when creating a new payload"
            },
            {
              "name": "parameter",
              "description": "This is a field for a parameter to be passed into the transformation in addition to the output from the prior transformation",
              "requirements": "This is not a required parameter - if you don't specify something, a blank string will be provided instead"
            }
          ]
        },
        {
          "DELETE": "API_BASE/transforms/(id:INTEGER)",
          "explanation": "Delete the associated transformation",
          "cli": "curl -X DELETE http://localhostAPI_BASE/transforms/1",
          "output": "{\"status\": \"success\", \"parameter\":\"\",\"timestamp\":\"11\/10\/2018 18:54:07\",\"id\":1,\"name\":\"readCommands\",\"order\":1,\"payload_type\":\"apfell-jxa\",\"t_type\":\"load\",\"operator\":\"apfell_admin\"}"
        },
        {
          "PUT": "API_BASE/transforms/(id:INTEGER)",
          "explanation": "Update a specific transform",
          "cli": "curl -X PUT -d '{\"parameter\": \"testing\"}' http://localhostAPI_BASE/transforms/1",
          "output": "",
          "parameters": [
            {
              "name": "name",
              "description": "The name of the transform function to call",
              "requirements": "This is a optional parameter and must match the function name exactly"
            },
            {
              "name": "order",
              "description": "Which order in the sequence of transforms is this one? If order 1 and 2 already exist, and you select order 1 for this one, then the original two will move to order 2 and 3 respectively",
              "requirements": "This is an optional parameter if you want to change the order of transformations"
            },
            {
              "name": "t_type",
              "description": "This is the type of transformation this new registration belongs to for the associated payload type",
              "requirements": "This is an optional parameter and right now can only be one of two things: \"load\" for loading new commands or \"create\" for transformations to do when creating a new payload"
            },
            {
              "name": "parameter",
              "description": "This is a field for a parameter to be passed into the transformation in addition to the output from the prior transformation",
              "requirements": "This is not a required parameter - if you don't specify something, a blank string will be provided instead"
            }
          ]
        }
      ]
    },
    {
      "name": "Credential",
      "api": [
        {
          "GET": "API_BASE/credentials/current_operation",
          "explanation": "Get all of the current credential objects for the current operation",
          "cli": "curl http://localhostAPI_BASE/credentials/current_operation",
          "output": "{\"status\": \"success\", \"credentials\": []}"
        },
        {
          "POST": "API_BASE/credentials",
          "explanation": "Register a new credential in the system for the current operation. This can be manually entered or automatically parsed out as part of future commands",
          "cli": "curl -X POST -d '{}' http://localhostAPI_BASE/credentials",
          "output": "{\"status\": \"success\", }",
          "parameters": [
            {
              "name": "type",
              "description": "The type of credential this is, can be: plaintext, hash, key, or certificate right now.",
              "requirements": "This is a required parameter and should be one of a strict set of options: plaintext, hash, key, or certificate"
            },
            {
              "name": "task",
              "description": "This is the ID number of the task that caused us to get this credential",
              "requirements": "This is an optional parameter since there's no task associated with putting something in manually"
            },
            {
              "name": "user",
              "description": "This is the user associated with the stolen credential",
              "requirements": "This is a required parameter and can be a user or computer account"
            },
            {
              "name": "domain",
              "description": "This is the domain associated with the stolen credential",
              "requirements": "This is a required parameter and is just a string of the domain associated with the credential"
            },
            {
              "name": "credential",
              "description": "This is the actual credential that was stolen",
              "requirements": "This is a required field"
            }
          ]
        },
        {
          "DELETE": "API_BASE/credentials/(id:INTEGER)",
          "explanation": "This removes the identified credential from the database. You can only remove credentials from your current operation",
          "cli": "curl -X DELETE http://localhostAPI_BASE/credentials/2",
          "output": "{\"status\": \"success\", }"
        }
      ]
    }
  ]
}
